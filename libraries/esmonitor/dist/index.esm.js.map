{
  "version": 3,
  "sources": ["../../common/check.js", "../src/utils.ts", "../src/Poller.ts", "../src/listeners.ts", "../src/global.ts", "../src/info.ts", "../src/globals.ts", "../../esc/standards.js", "../../common/pathHelpers.ts", "../src/inspectable/handlers.ts", "../src/inspectable/define.ts", "../src/inspectable/index.ts", "../src/optionsHelpers.ts", "../../common/drill.js", "../src/Monitor.ts", "../src/index.ts"],
  "sourcesContent": ["const moduleStringTag = '[object Module]'\n\nexport const esm = (object) => {\n    const res = object && (!!Object.keys(object).reduce((a,b) => {\n        const desc = Object.getOwnPropertyDescriptor(object, b)\n        const isModule = (desc && desc.get && !desc.set) ? 1 : 0\n        return a + isModule\n    }, 0) || Object.prototype.toString.call(object) === moduleStringTag)\n\n    return !!res\n}", "import { Options } from \"../../common/types\"\nimport { ArrayPath, MonitorOptions } from \"./types\"\n\n\nexport const isSame = (a,b) => {\n    if (a && typeof a === 'object' && b && typeof b === 'object') {\n        const jA = JSON.stringify(a)\n        const jB = JSON.stringify(b)\n        return jA === jB\n    } else return a === b\n}\n\n\nexport const iterateSymbols = (obj, callback) => {\n    return Promise.all(Object.getOwnPropertySymbols(obj).map((sym: symbol) => callback(sym, obj[sym])))\n}\n\nexport const  getPath = (type, info) => {\n    const pathType = info.path[type]\n    if (!pathType) throw new Error('Invalid Path Type')\n    const filtered = pathType.filter((v) => typeof v === 'string')\n    return filtered.join(info.keySeparator)\n}\n\nexport const getPathInfo = (path, options: MonitorOptions) => {\n    let splitPath = path\n    if (typeof path === 'string') splitPath = path.split(options.keySeparator)\n    else if (typeof path === 'symbol') splitPath = [path]\n    return {\n        id: splitPath[0],\n        path: splitPath.slice(1) as ArrayPath,\n    }\n}\n\nexport const runCallback = (callback, path, info, output, setGlobal=true) => {\n    if (callback instanceof Function) {\n        \n        // Promises\n        if (output && typeof output === 'object' && typeof output.then === 'function') output.then(value => callback(path, info, value))\n\n        // Normal\n        else callback(path, info, output)\n    }\n\n    // ------------------ Set Manually in Inspected State ------------------\n    if (setGlobal && window.ESMonitorState) {\n        const callback = window.ESMonitorState.callback\n        window.ESMonitorState.state[path] = { output, value: info }\n        runCallback(callback, path, info, output, false)\n    }\n}", "import * as utils from './utils'\nimport { ListenerInfo, PollingOptions, ReferenceShortcut } from './types'\n\nconst defaultSamplingRate = 60\n\nexport default class Poller {\n\n    #pollingId?: NodeJS.Timer;\n    #sps: number;\n\n    listeners: {[x:symbol]: ListenerInfo} = {}\n\n    get sps(){\n        return this.#sps\n    }\n\n    set sps(sps: number) {\n        this.#sps = sps\n\n        const listeners = this.listeners\n        const nListeners = Object.keys(listeners).length\n        if (nListeners){\n            this.stop()\n            this.start()\n        }\n    }\n\n    constructor(\n        listeners?: Poller['listeners'],\n        sps?: Poller['sps']\n    ) {\n        if (listeners) this.listeners = listeners // Initialize listeners externally\n        if (sps) this.sps = sps // Set sampling rate externally\n    }\n\n    setOptions = (opts: PollingOptions = {}) => {\n        for (let key in opts) this[key] = opts[key] // Merge polling option\n    }\n\n\n    // Basic Object Manipulation\n    add = (info: ListenerInfo) => {\n        const sub = info.sub\n        this.listeners[sub] = info\n        this.start() // Start polling if not already started\n    }\n    get = (sub: ListenerInfo['sub']) => this.listeners[sub]\n    remove = (sub: ListenerInfo['sub']) => {\n        delete this.listeners[sub]\n        if (!Object.keys(this.listeners).length) this.stop() // Stop polling if no listeners\n    }\n\n    // Poll Listeners\n    poll = (listeners) => {\n        utils.iterateSymbols(listeners, (sym, o) => {\n            let { callback, current, history } = o\n\n            // Resolving the path once\n            if (!o.path.resolved) o.path.resolved = utils.getPath('output', o)\n\n            if (!utils.isSame(current, history)){\n                utils.runCallback(callback, o.path.resolved, {}, current)\n                if (typeof current === 'object') {\n                    if (Array.isArray(current)) history = [...current]\n                    else history = {...current}\n                } else listeners[sym].history = current\n            }\n        })\n    }\n\n    // Start Polling\n    start = (listeners = this.listeners) => {\n        if (!this.sps) this.sps = defaultSamplingRate // Set default sampling rate\n        else if (!this.#pollingId) {\n            console.warn('[escode]: Starting Polling!')\n            this.#pollingId = setInterval(() => this.poll(listeners), 1000/this.sps)\n        }\n    }\n\n    // Stop Polling\n    stop = () => {\n        if (this.#pollingId) {\n            console.warn('[escode]: Stopped Polling!')\n            clearInterval(this.#pollingId)\n            this.#pollingId = undefined\n        }\n    }\n}\n", "import { ArrayPath, ListenerInfo, ListenerLookups, ListenerPool, ListenerRegistry, MonitorOptions, ReferenceShortcut } from \"./types\"\nimport * as utils from './utils'\nimport * as infoUtils from './info'\nimport { isProxy } from './globals'\nimport { getFromPath } from \"../../common/pathHelpers\"\nimport { setFromOptions } from \"./optionsHelpers\"\n\nexport const info = (id, callback, path, originalValue, base, listeners, options: MonitorOptions, refShortcut: Partial<ReferenceShortcut> = {}) => {\n    if (typeof path === 'string') path = path.split(options.keySeparator)\n    const relativePath = path.join(options.keySeparator)\n\n    const refs = base\n\n    const shortcutRef = refShortcut.ref\n    const shortcutPath = refShortcut.path\n\n    const get = (path: ArrayPath) => {\n        const thisBase = shortcutRef ?? base\n \n        const res = getFromPath(thisBase, path, {\n            keySeparator: options.keySeparator,\n            fallbacks: options.fallbacks,\n        })\n\n        return res\n    }\n\n    const set = (path: ArrayPath, value) => {\n        const thisBase = shortcutRef ?? base\n\n        setFromOptions(path, value, options, {\n            reference: thisBase,\n            listeners\n        })\n    }\n\n    // Derive onUpdate Function\n    let onUpdate = options.onUpdate\n    let infoToOutput = {}\n\n    if (onUpdate && typeof onUpdate === 'object' && onUpdate.callback instanceof Function) {\n        infoToOutput = onUpdate.info ?? {}\n        onUpdate = onUpdate.callback\n    }\n\n    const absolute = [id, ...path]\n    let pathInfo = {\n        absolute,\n        relative: relativePath.split(options.keySeparator),\n        parent: absolute.slice(0,-1)\n    } as Partial<ListenerInfo['path']>\n\n    pathInfo.output =  pathInfo[options.pathFormat]\n    const completePathInfo = pathInfo as ListenerInfo['path']\n\n    const info = {\n        id, \n        path: completePathInfo, \n        keySeparator: options.keySeparator,\n\n        infoToOutput,\n        callback: (...args) => {\n            const output = callback(...args)\n            \n            // ------------------ Run onUpdate Callback ------------------\n            if (onUpdate instanceof Function) onUpdate(...args)\n\n            // Return Standard Output\n            return output\n        }, \n        get current() { return get(shortcutPath ?? info.path.absolute) },\n        set current(val) { set(shortcutPath ?? info.path.absolute, val) },\n        get parent() { \n            return get(shortcutPath ? shortcutPath?.slice(0,-1) : info.path.parent) \n        },\n        get reference(){ return refs[id] },\n        set reference(val){ refs[id] = val },\n        original: originalValue,\n        history: (typeof originalValue === 'object') ? Object.assign({}, originalValue) : originalValue,\n        sub: Symbol('subscription'),\n        last: path.slice(-1)[0],\n    } as ListenerInfo\n\n    return info\n}\n\n\nconst registerInLookup = (name, sub, lookups) => {\n\n    if (lookups) {\n        const id = Math.random()\n        lookups.symbol[sub] = {\n            name,\n            id \n        } // set in lookup\n        if (!lookups.name[name]) lookups.name[name] = {}\n        lookups.name[name][id] = sub\n    }\n}\n\nexport const register = (info, collection, lookups?: ListenerLookups) => {\n    // Place in Function Registry\n    const absolute = utils.getPath('absolute', info)\n    if (!collection[absolute]) collection[absolute] = {}\n    collection[absolute][info.sub] = info\n\n    // Place in Lookup Registry\n    registerInLookup(absolute, info.sub, lookups)\n}\n\nconst listeners = {\n    functions, \n    setters\n}\n\n// Set Listener with Minimal Information\nexport const set = (type, absPath, value, callback, base, allListeners: Partial<ListenerRegistry>, options: MonitorOptions) => {\n\n    const { id, path } = utils.getPathInfo(absPath, options)\n\n    const fullInfo = info(id, callback, path, value, base, listeners, options)\n\n    // ------------------ Set Listener in Registry ------------------\n    if (listeners[type]) listeners[type](fullInfo, allListeners[type], allListeners.lookup) // goes up to register()\n    else {\n        const path = utils.getPath('absolute', fullInfo)\n        allListeners[type][path][fullInfo.sub] = fullInfo\n        if (allListeners.lookup) registerInLookup(path, fullInfo.sub, allListeners.lookup)\n    }\n}\n\nconst get = (info, collection) => collection[utils.getPath('absolute', info)]\n\n\nconst handler = (info, collection, subscribeCallback, lookups?: ListenerLookups) => {\n    \n    // Create Listener for this Object\n    if (!get(info, collection)) {\n        let parent = info.parent\n        let val = parent[info.last]\n        subscribeCallback(val, parent)\n    }\n\n    // Register in Collection\n    register(info, collection, lookups)\n}\n\n\nexport const setterExecution = (listeners, value) => {\n    return utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path,  {}, value)\n    })\n}\n\nexport function setters (info: ListenerInfo, collection: ListenerPool, lookups?: ListenerLookups) {\n\n    const thisValue = this \n    handler(info, collection['setters'], (value, parent) => {\n\n        let val = value\n\n        if (!parent[isProxy]) { \n\n            let redefine = true\n            try {\n                delete parent[info.last] // removing original definition\n            }  catch (e) {\n                console.error('Unable to redeclare setters. May already be a dynamic object...')\n                redefine  = false\n            }\n\n            if (redefine) {\n                try {\n                    Object.defineProperty(parent, info.last, {\n                        get: () => val,\n                        set: async (v) => {\n                            const isFunction = typeof val === 'function'\n                            val = v\n                            if (!isFunction) {\n                                const listeners = Object.assign({}, collection['setters'][utils.getPath('absolute', info)])\n                                setterExecution(listeners, v)\n                            }\n                            else val = getProxyFunction.call(thisValue, info, collection, val)\n                        },\n                        enumerable: true,\n                        configurable: true // TODO: Ensure that you are removing later...\n                    })\n                } catch (e) {\n                    throw e\n                }\n            }\n        }\n    }, lookups)\n}\n\n\nexport function getProxyFunction(info, collection, fn) {\n    return function (...args) {\n        const listeners = collection['functions'][utils.getPath('absolute', info)]\n        return functionExecution(this, listeners, fn ?? info.original, args)\n    }\n}\n\nexport const functionExecution = (context, listeners, func, args) => {\n    listeners = Object.assign({}, listeners)\n    const keys = Object.getOwnPropertySymbols(listeners)\n    const infoTemplate = listeners[keys[0]] ?? {} as ListenerInfo // Info is same, callback is different\n    const executionInfo = infoUtils.get((...args) => func.call(context, ...args), args, infoTemplate.infoToOutput)\n\n    utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path, executionInfo.value, executionInfo.output)\n    })\n\n    return executionInfo\n}\n\n\nexport function functions (info: ListenerInfo, collection: ListenerPool, lookups?: ListenerLookups) {\n\n    // Register for functions\n    handler(info, collection['functions'], (_, parent) => {      \n        if (!parent[isProxy]) { \n            parent[info.last] = getProxyFunction.call(this, info, collection)\n\n            // Also register as a setter\n            setters(info, collection, lookups)\n        }\n    }, lookups)\n}", "import { Info } from \"./types\";\n\ntype GlobalESMonitorState = {\n    state: {[x:string]: {output: any, value: any}},\n    callback?: Function | undefined,\n    info: Info\n}\n\ndeclare global {\n    interface Window { ESMonitorState: GlobalESMonitorState; }\n}\n\n// ------------- Global Inspectable (monitored for all changes) -------------\nwindow.ESMonitorState = {\n    state: {},\n    callback: undefined,\n    info: {}\n} as GlobalESMonitorState\n\n\nexport default window.ESMonitorState", "import global from './global'\nimport { ActiveInfo } from './types'\n\nexport const performance = async (callback, args) => {\n    \n    const tic = globalThis.performance.now()\n    const output = await callback(...args)\n    const toc = globalThis.performance.now()\n    \n    return {\n        output,\n        value: toc - tic\n    }\n}\n\nconst infoFunctions = {\n    performance\n}\n\nexport const get = (func, args, info) => {\n\n    let result = {\n        value: { },\n        output: undefined,\n    } as {\n        value: ActiveInfo,\n        output: any\n    }\n    \n    \n    const infoToGet = {...global.info, ...info}\n\n    for (let key in infoToGet)  {\n        if (infoToGet[key] && infoFunctions[key]) {\n            const ogFunc = func\n            func = async (...args) => {\n                const o = await infoFunctions[key](ogFunc, args)\n                result.value[key] = o.value\n                return o.output\n            }   \n        }\n    }\n\n    result.output = func(...args)\n    return result\n}", "export const isProxy = Symbol(\"isProxy\")\n\nexport const fromInspectable = Symbol(\"fromInspectable\")\n\nexport const fromInspectableHandler = Symbol(\"fromInspectableHandler\")", "export const keySeparator = '.'\n\nexport const defaultPath = 'default'\n\nexport const esSourceKey = '__esmpileSourceBundle'\n\nexport const isPrivate = (key) => false //key[0] === '_' // No private keys\n\n\nexport const specialKeys = {\n\n    isGraphScript: '__graphscipt',\n\n    default: defaultPath,\n\n    start: '__onconnected', // asked to start\n    stop: '__ondisconnected',\n    connected: '__connected', // wait until connected\n    resolved: '__resolved', // wait until fully resolved\n    started: '__started', // wait until started\n\n    hierarchy: '__children',\n    element: '__element',\n    webcomponents: '__define',\n    attributes: '__attributes',\n\n    listeners: {\n        value: '__listeners',\n        branch: '__branch',\n        bind: '__bind',\n        trigger: '__trigger',\n        format: '__format',\n    },\n\n    trigger: '__trigger',\n    compose: '__compose',\n    apply: '__apply',\n\n    // Internal to Compose\n    uri: 'src',\n    reference: 'ref',\n\n    childPosition: '__childposition',\n\n    attribute: 'escomponent',\n    options: '__options',\n\n    parent: '__parent',\n    component: '__component',\n\n    source: '__source',\n    path: '__path',\n\n    animate: '__animate',\n    states: '__states',\n\n    promise: '__childresolved',\n    editor: '__editor',\n\n    flow: '__manager',\n\n    original: '__original',\n\n    resize: '__onresize',    \n    \n\n    proxy: '__proxy'\n}\n", "import { PathFormat, SetValueOptions } from \"../esmonitor/src/types\"\nimport * as standards from '../esc/standards'\n\nconst hasKey = (key, obj) =>  key in obj\n\n\nconst getShortcut = (path, shortcuts, keySeparator) => {\n    const sc = shortcuts[path[0]]\n    if (sc) {\n        const value = sc[path.slice(1).join(keySeparator)]\n        if (value) return value\n    }\n}\n\nexport const getFromPath = (baseObject, path, opts: any = {}, throwError = true) => {\n\n\n    const fallbackKeys = opts.fallbacks ?? []\n    const keySeparator = opts.keySeparator ?? standards.keySeparator\n\n    if (opts.shortcuts) {\n        const shortcut = getShortcut(path, opts.shortcuts, keySeparator)\n        if (shortcut) {\n            if (opts.output === 'info') return { value: shortcut, exists: true, shortcut: true }\n            else return shortcut\n        }\n    }\n\n\n    if (typeof path === 'string') path = path.split(keySeparator).flat()\n    else if (typeof path == 'symbol') path = [path]\n\n    let exists;\n    path = [...path]\n\n    path = path.map(o => (typeof o === \"string\") ? o.split(keySeparator) : o)\n\n\n    let ref =  baseObject\n    \n    for (let i = 0; i < path.length; i++) {\n\n        if (!ref) {\n            if (!throwError) return\n            const message = `Could not get path`\n            console.error(message, path, ref)\n            throw new Error(message)\n        }\n\n        const str = path[i]\n        // Try Inside ES Components\n        if (!hasKey(str, ref) && '__children' in ref) {\n            for (let i in fallbackKeys) {\n                const key = fallbackKeys[i]\n                if (hasKey(key, ref)) {\n                    ref = ref[key]\n                    break\n                }\n            }\n        }\n        \n        // Try Standard Path\n        exists = hasKey(str, ref)\n\n        if (exists) ref = ref[str]\n        else {\n            ref = undefined\n            exists = true\n        }\n    }\n\n    if (opts.output === 'info') return { value: ref, exists }\n    else return ref\n}\n\n\nexport const setFromPath = (path: PathFormat, value: any, ref:any, opts: SetValueOptions = {}) => {\n    const create = opts?.create ?? false\n    const keySeparator = opts?.keySeparator ?? standards.keySeparator\n\n    if (typeof path === 'string') path = path.split(keySeparator)\n    else if (typeof path == 'symbol') path = [path]\n    path = [...path]\n\n    const copy = [...path]\n    const last = copy.pop() as string | symbol\n\n    if (ref.__children) ref = ref.__children \n\n    for (let i = 0; i < copy.length; i++) {\n        const str = copy[i]  \n        let has = hasKey(str, ref)\n        \n        // Create if not found\n        if (create && !has) {\n            ref[str] = {}\n            has = true\n        }\n\n        // Swap reference\n        if (has) ref = ref[str]\n\n        // Throw error if not found\n        else {\n            const message = `Could not set path`\n            console.error(message, path)\n            throw new Error(message)\n        }\n\n        // Transfer to ESComponents automatically (if not second-to-last key...)\n        if (ref.__children) ref = ref.__children \n    }\n\n    ref[last] = value\n}", "import * as listenerUtils from \"../listeners\";\nimport { runCallback } from \"../utils\";\nimport { \n    fromInspectable,\n    isProxy \n} from '../globals'\nimport Inspectable from \".\";\nimport define from \"./define\";\n\nexport const functions = function () {\n    const inspectable = this as Inspectable\n    return {\n        apply: async function (target, thisArg, argumentsList) {\n            try {\n\n                let foo = target\n                const isFromInspectable = argumentsList[0]?.[fromInspectable] \n                if (isFromInspectable) {\n                    foo = argumentsList[0].value\n                    argumentsList = argumentsList.slice(1)\n                }\n\n                let listeners = inspectable.listeners.functions\n                // Notify of Function Execution\n                const pathStr = inspectable.path.join(inspectable.options.keySeparator)\n\n                const toActivate =  (listeners) ? listeners[pathStr] : undefined\n                let output, executionInfo: any = {};\n\n                if (toActivate){\n                    executionInfo = listenerUtils.functionExecution(thisArg, toActivate, foo, argumentsList)\n                    output = executionInfo.output\n                } \n                \n                // Default Behavior\n                else {\n                    output = foo.apply(thisArg, argumentsList);\n                    executionInfo = inspectable?.state?.[pathStr]?.value ?? {}\n                }\n\n                \n                // Notify with Proxy Callback\n                const callback = inspectable.options.callback\n\n                runCallback(callback, pathStr, executionInfo, output)\n\n                // Return output to function\n                return output\n\n            } catch (e) {\n                console.warn(`Function failed:`, e, inspectable.path);\n            }\n        }\n    };\n}\n\nexport const objects = function () {\n    const inspectable = this as Inspectable\n    return {\n\n        get (target, prop, receiver) {\n            if (prop === isProxy) return true;\n            return Reflect.get(target, prop, receiver);\n        },\n        \n        set(target, prop, newVal, receiver) {            \n            \n            if (prop === isProxy) return true;\n            const pathStr = [...inspectable.path, prop].join(inspectable.options.keySeparator)\n\n            const isFromProxy = newVal?.[isProxy]\n            const isFromInspectable = newVal?.[fromInspectable]\n            if (isFromInspectable) newVal = newVal.value\n\n            const listeners = inspectable.listeners.setters \n\n            // Set New Listeners Automatically (if global callback is specified)\n            const desc = Object.getOwnPropertyDescriptor(target, prop)\n            const createListener = desc && !desc.get && !desc.set\n\n            if (createListener) {\n                if (typeof inspectable.options.globalCallback === 'function') {\n                    const id = inspectable.path[0]\n                    define.call(inspectable, prop, true) // Get notified when changed on the target\n                    listenerUtils.set('setters', pathStr, newVal, inspectable.options.globalCallback, {[id]: inspectable.root}, inspectable.listeners, inspectable.options)\n                }\n            }\n\n\n            // Create Proxies for Objects\n            if (newVal) {\n                const newProxy = inspectable.create(prop, target, newVal)\n                if (newProxy) newVal = newProxy\n            }\n\n            const toActivate = !isFromProxy\n            if (\n                listeners \n                && toActivate // Don't manually trigger for proxies\n                && !inspectable.newKeys.has(prop) // Don't manually trigger for new keys\n            ) {\n                const toActivate = listeners[pathStr]\n                if (toActivate) listenerUtils.setterExecution(toActivate, newVal) // run callbacks\n            }\n\n            const callback = inspectable.options.callback\n            const info = inspectable?.state?.[pathStr]?.value ?? {}\n            runCallback(callback, pathStr, info, newVal)\n\n            if (isFromInspectable || !toActivate) return true\n            else return Reflect.set(target, prop, newVal, receiver);\n        },\n        // deleteProperty(target, key) {\n        //     console.log('Delete', key)\n        //     // if (!(key in target)) { return false; }\n        //     // return target.removeItem(key);\n        //     return true\n        // }\n    }\n}\n", "import { fromInspectable, isProxy } from \"../globals\"\n\nfunction define(key, registerAsNewKey: boolean) {\n\n    const inspectable = this\n\n    const target = this.target\n\n    if (!this.parent) {\n        let value = target[key]\n\n        // Intercept functions\n        if (typeof value === 'function') {\n            target[key] = async (...args) => await this.proxy[key]({ [fromInspectable]: true, value }, ...args)\n        } \n\n        // Basic Getter / Setter for Original Input\n        else {\n\n            try {\n                Object.defineProperty(target, key, {\n                    get: () => value,\n\n                    // Support setting from inspectable too\n                    set: function (val) {\n                        value = val\n                        inspectable.proxy[key] = {[isProxy]: this[isProxy], [fromInspectable]: true, value: val}\n                    },\n                    enumerable: true,\n                    configurable: true // TODO: Ensure that you are removing later...\n                })\n\n            } catch (e) {\n                console.error(`Could not reassign ${key} to a top-level setter...`)\n            }\n        }\n    }\n\n    if (registerAsNewKey) this.newKeys.add(key)\n\n    // Create More Proxies Inside\n    this.create(key, target, undefined, true)\n}\n\nexport default define;", "import * as handlers from './handlers';\nimport * as check from '../../../common/check'\nimport { ArrayPath, ListenerRegistry, InspectableOptions } from '../types';\nimport * as standards from '../../../esc/standards'\nimport { setFromPath } from '../../../common/pathHelpers';\nimport { isProxy } from '../globals';\nimport define from './define';\n\nexport type InspectableProxy = ProxyConstructor & {\n    __proxy: ProxyConstructor,\n    __esInspectable: Inspectable\n}\n\n\nconst canCreate = (parent, key?, val?) => {\n\n    try {\n        if (val === undefined) val = parent[key]\n    } catch (e) {\n        return e\n    }\n\n    // Check if we already have a proxy\n    const alreadyIs = parent[key] && parent[key][isProxy]\n    if (alreadyIs) return false // Already a proxy\n\n\n    const type = typeof val\n    const isObject = type === 'object'\n    const isFunction = type == 'function'\n    \n\n    // Only listen to objects and functions\n    const notObjOrFunc = !val || !(isObject || isFunction )\n    if (notObjOrFunc) return false\n\n    if (val instanceof Element) return false // Avoid HTML elements\n    if (val instanceof EventTarget) return false // Avoid HTML elements\n\n    const isESM = isObject && check.esm(val)\n\n    if (isFunction) return true\n    else {\n        \n        const desc = Object.getOwnPropertyDescriptor(parent, key)\n\n        if (desc &&((desc.value && desc.writable) || desc.set)) {\n            if (!isESM) return true // Cannot create a Proxy object for ESM\n        } else if (!parent.hasOwnProperty(key)) return true\n    }\n\n    return false\n\n}\n\nexport default class Inspectable {\n\n    path: ArrayPath = []\n    parent?: Inspectable\n    options: InspectableOptions\n    proxy: ProxyConstructor\n    listeners: Partial<ListenerRegistry> = {}\n    newKeys = new Set()\n\n    target: any\n    root: any\n\n    state: {[x:string]: any} = {}\n\n    constructor ( target:any = {}, opts: Partial<InspectableOptions> = {}, name?, parent?) {\n\n        if (!opts.pathFormat) opts.pathFormat = 'relative'\n        if (!opts.keySeparator) opts.keySeparator = standards.keySeparator\n\n        // -------------- Only Listen to ES Components --------------\n\n        if (target.__proxy) this.proxy = target.__proxy\n        else if (target[isProxy]) this.proxy = target\n        else {\n\n            this.target = target\n            this.options = opts as InspectableOptions\n            this.parent = parent\n\n            if (this.parent) {\n                this.root = this.parent.root\n                this.path = [...this.parent.path]\n                this.state = this.parent.state ?? {} // Share state with the parent\n            } else this.root = target\n\n            if (name) this.path.push(name)\n            if (this.options.listeners) this.listeners = this.options.listeners\n\n            if (this.options.path) {\n                if (this.options.path instanceof Function) this.path = this.options.path(this.path)\n                else if (Array.isArray(this.options.path)) this.path = this.options.path\n                else console.log('Invalid path', this.options.path)\n            }\n\n            // remove symbols from the path\n            if (this.path) this.path = this.path.filter(str => typeof str === 'string')\n\n\n            if (!this.options.keySeparator) this.options.keySeparator = standards.keySeparator\n\n            let type = this.options.type\n            if (type != 'object') type = (typeof target === 'function')  ? 'function' : 'object';\n            const handler =  handlers[`${type}s`].call(this)\n\n            this.proxy = new Proxy(target, handler)\n\n            // Set status on original\n            Object.defineProperty(target, '__proxy', { value: this.proxy, enumerable: false })\n            Object.defineProperty(target, '__esInspectable', { value: this, enumerable: false })\n\n\n            // Create Nested Inspectable Proxies\n            for (let key in target) define.call(this, key)\n        }\n\n        return this.proxy as any // Replace class passed to the user with the proxy\n\n    }\n\n    set = (path, info, update) => {\n\n        this.state[path] = {\n            output: update,\n            value: info,\n        }\n\n        // Set on Proxy Object\n        setFromPath(path, update, this.proxy, { create: true });\n    }\n\n    check = canCreate\n\n    create = (key, parent, val?, set = false) => {\n\n        const create = this.check(parent, key, val)\n        if (val === undefined) val = parent[key] \n\n        if (create && !(create instanceof Error)) {\n            parent[key] = new Inspectable(val, this.options, key, this)\n            return parent[key]\n        }\n\n        if (set) {\n            try {\n                this.proxy[key] = val ?? parent[key] // Notify on initialization\n            } catch (e) {\n                const isESM = check.esm(parent)\n                const path = [...this.path, key]\n                console.error(`Could not set value (${path.join(this.options.keySeparator)})${isESM ? ' because the parent is an ESM.' : ''}`, isESM ? '' : e)\n            }\n        }\n\n        return\n    }\n}", "import { setFromPath } from \"../../common/pathHelpers\"\nimport Inspectable from \"./inspectable\"\nimport { MonitorOptions, SetFromOptionsType } from \"./types\"\n\nexport const setFromOptions = (path, value, baseOptions: MonitorOptions, opts: SetFromOptionsType) => {\n\n        const ref = opts.reference\n        \n        const id = (Array.isArray(path)) ? path[0] : (typeof path === 'string') ? path.split(baseOptions.keySeparator)[0] : path\n        let isDynamic = opts.hasOwnProperty('static') ? !opts.static : false\n\n        if (isDynamic && !globalThis.Proxy) {\n            isDynamic = false\n            console.warn('Falling back to using function interception and setters...')\n        }\n\n        if (isDynamic) {\n            value = new Inspectable(value, {\n                pathFormat: baseOptions.pathFormat,\n                keySeparator: baseOptions.keySeparator,\n                listeners: opts.listeners,\n                path: (path) => path.filter((str) => !baseOptions.fallbacks || !baseOptions.fallbacks.includes(str)),\n                // listenDeeper: ['__path'],\n                // listenDeeper: ['test']\n            }, id)\n        }\n\n        let options = {keySeparator: baseOptions.keySeparator, ...opts}\n        setFromPath(path, value, ref, options)\n\n        return value\n    }", "import { esm } from './check.js'\n\nexport const drillSimple = (obj, callback, options) => {\n\n    let accumulator = options.accumulator\n    if (!accumulator) accumulator = options.accumulator = {}\n\n    const ignore = options.ignore || []\n    const path = options.path || []\n    const condition = options.condition ||  true\n\n    const seen = []\n    const fromSeen = []\n    \n    let drill = (obj, acc={}, globalInfo) => {\n\n        for (let key in obj) {\n            if (ignore.includes(key)) continue\n            const val = obj[key]\n            const newPath = [...globalInfo.path, key]\n\n            const info = {\n                typeof: typeof val,\n                name: val?.constructor?.name,\n                simple: true,\n                object: val && typeof val === 'object',\n                path: newPath\n            }\n            if (info.object) {\n                const name = info.name\n\n                const isESM = esm(val) // make sure to catch ESM\n\n                if (isESM || name === 'Object' || name === 'Array') {\n                    info.simple = true\n                    const idx = seen.indexOf(val)\n                    if (idx !== -1) acc[key] =fromSeen[idx]\n                    else {\n                        seen.push(val)\n\n                        const pass = condition instanceof Function ? condition(key, val, info) : condition\n                        info.pass = pass\n                        \n                        acc[key] = callback(key, val, info)\n\n                        if (pass) {\n                            fromSeen.push(acc[key])\n                            acc[key] = drill(val, acc[key], {...globalInfo, path: newPath}) // Drill simple objects\n                        }\n                    }\n                } \n                else {\n                    info.simple = false\n                    acc[key] = callback(key, val, info)\n                }\n            } else acc[key] = callback(key, val, info)\n        } \n\n        return acc\n    }\n\n    return drill(obj, accumulator, { path })\n}", "import * as check from '../../common/check.js'\nimport Poller from './Poller.js'\n\nimport { PathFormat, InternalOptions, ListenerRegistry, ArrayPath, MonitorOptions, SetFromOptionsType } from './types'\nimport * as listeners from './listeners'\nimport { iterateSymbols, getPath, getPathInfo } from './utils.js'\nimport { drillSimple } from '../../common/drill.js'\nimport { getFromPath } from '../../common/pathHelpers.js'\n\nimport * as standards from '../../esc/standards'\nimport { setFromOptions } from './optionsHelpers.js'\n\nconst createLookup = () => {\n    return { symbol: {}, name: {} }\n}\n\nexport default class Monitor {\n\n    poller = new Poller()\n\n    options: MonitorOptions = {\n        pathFormat: 'relative',\n        keySeparator: standards.keySeparator,\n    }\n    \n    listeners: ListenerRegistry = {\n        polling: this.poller.listeners,\n        functions: {},\n        setters: {},\n        lookup: createLookup()\n    }\n\n    references: {\n        [x:string | symbol]: {\n            [x:string | symbol]: any\n        }\n    } = {}\n\n    constructor(opts:Partial<MonitorOptions>={}){\n\n        // Make listener lookup non-enumerable\n        Object.defineProperty(this.listeners, 'lookup', {\n            value: createLookup(),\n            enumerable: false,\n            configurable: false\n        })\n\n        Object.assign(this.options, opts)\n        this.poller.setOptions(opts.polling)\n    }\n\n    get = (path, output?, reference = this.references, throwError = true) => {\n\n        return getFromPath(reference, path, {\n            keySeparator: this.options.keySeparator,\n            fallbacks: this.options.fallbacks,\n            output\n        }, throwError)\n    }\n\n    set = (path, value, opts: SetFromOptionsType= {}) => {\n        const optsCopy = {...opts}\n        if (!optsCopy.reference) optsCopy.reference = this.references\n        if (!optsCopy.listeners) optsCopy.listeners = this.listeners\n\n        return setFromOptions(path, value, this.options, optsCopy)\n    }\n\n    // A simple wrapper for listen()\n    on = (absPath: PathFormat, callback) => {\n        console.log('On', absPath, this.options)\n        const info = getPathInfo(absPath, this.options)\n        return this.listen(info.id, callback, info.path)\n    }\n\n\n    getInfo = (label, callback, path, original) => {\n\n        const info = listeners.info(label, callback, path, original, this.references, this.listeners, this.options)\n        const id = Math.random()\n        const lookups = this.listeners.lookup\n        const name = getPath('absolute', info)\n        lookups.symbol[info.sub] = {\n            name,\n            id\n        }\n\n        if (!lookups.name[name]) lookups.name[name] = {}\n        lookups.name[name][id] = info.sub\n        \n        return info\n    }\n\n    listen = (id, callback, path: PathFormat = [], __internal: Partial<InternalOptions> = {}) => {\n\n\n        if (typeof path === 'string') path = path.split(this.options.keySeparator)\n        else if (typeof path === 'symbol') path = [path]\n\n        const arrayPath = path as ArrayPath\n\n        let baseRef = this.get(id)\n\n        if (!baseRef) {\n            console.error(`Reference does not exist.`, id)\n            return\n        }\n\n\n        if (!__internal.poll) __internal.poll = check.esm(baseRef) // Inherit ESM status\n        if (!__internal.seen) __internal.seen = []\n\n        const __internalComplete = __internal as InternalOptions\n\n        // Drill Reference based on Path\n        const thisPath = [id, ...arrayPath]\n        const ref = this.get(thisPath)\n\n\n        // Create listeners for Objects\n        const toMonitorInternally = (val, allowArrays=false) => {\n            const first = val && typeof val === 'object'\n            \n            // Only Objects\n            if (!first) return false\n\n            // No Elements\n            const isEl = val instanceof Element\n            if(isEl) return false\n\n            if (allowArrays) return true\n            else return !Array.isArray(val)\n        }\n\n\n        // ------------------ Create Subscription ------------------\n\n        // Case #1: Subscribe to each object property individually\n        let subs = {}\n        if (toMonitorInternally(ref, true)) {\n\n            if (ref.__esInspectable) ref.__esInspectable.options.globalCallback = callback\n\n            drillSimple(ref, (_, __, drillInfo) => {\n                if (drillInfo.pass) return \n                else {\n                    const fullPath = [...arrayPath, ...drillInfo.path]\n                    const internalSubs = this.listen(id, callback, fullPath, __internalComplete) // subscribe to all\n                    Object.assign(subs, internalSubs)\n                }\n            }, {\n                condition: (_, val) => toMonitorInternally(val)\n            })\n        } \n\n        // Case #2: Subscribe to specific property\n        let info;\n        try {\n            \n            // Force Polling\n            info = this.getInfo(id, callback, arrayPath, ref)\n\n            if (__internalComplete.poll) {\n                this.poller.add(info)\n            }\n\n            // Direct Methods\n            else {\n\n                let type = 'setters' // trigger setters\n                if (typeof ref === 'function') type = 'functions' // intercept function calls\n\n                this.add(type, info)\n            }\n            \n        } catch (e) {\n            console.error('Fallback to polling:', path, e)\n            this.poller.add(info)\n            // __internalComplete.poll = true\n        }\n        \n\n        subs[getPath('absolute', info)] = info.sub\n\n        // Notify User of Initialization\n        if (this.options.onInit instanceof Function) {\n            const executionInfo = {}\n            for (let key in info.infoToOutput) executionInfo[key] = undefined\n            this.options.onInit(getPath('output', info), executionInfo)\n        }\n\n        return subs\n    }\n\n    add = (type, info) => {\n        if (listeners[type]) listeners[type](info, this.listeners, this.listeners.lookup)\n        else this.listeners[type][getPath('absolute', info)][info.sub] = info\n    }\n\n    // Unsubscribe from a subscription\n    remove = (subs) => {\n\n        // Clear All Subscriptions if None Specified\n        if (!subs) {\n            subs = {\n                ...this.listeners.functions,\n                ...this.listeners.setters,\n                ...this.listeners.polling,\n            }\n        }\n\n\n        if (typeof subs!== 'object') subs = { sub: subs }\n\n        for (let key in subs) {\n\n            let innerSub = subs[key]\n\n            const handleUnsubscribe = (sub) => {\n                const res = this.unsubscribe(sub)\n                if (res === false) console.warn(`Subscription for ${key} does not exist.`, sub)\n            }\n\n            if (typeof innerSub !== 'symbol') iterateSymbols(innerSub, handleUnsubscribe)\n            else handleUnsubscribe(innerSub)\n        }\n\n        return true \n    }\n\n    unsubscribe = (sub) => {\n            const info = this.listeners.lookup.symbol[sub]\n            const absPath = info.name\n\n            // Remove from Polling listeners\n            const polling = this.poller.get(sub)\n\n            const funcs = this.listeners.functions[absPath]\n            const func = funcs?.[sub]\n            const setters = this.listeners.setters[absPath]\n            const setter = setters?.[sub]\n\n            if (polling) this.poller.remove(sub)\n            \n            // Reassign to Original Function\n            else if (func) {\n                delete funcs[sub]\n                if (!Object.getOwnPropertySymbols(funcs).length) {\n                    Object.defineProperty(func.parent, func.last, {\n                        value: func.original,\n                        writable: true\n                    })\n                    delete this.listeners.functions[absPath]\n                }\n            }\n            \n            // Transition Back to Standard Object\n            else if (setter) {\n                delete setters[sub]\n                if (!Object.getOwnPropertySymbols(setters).length) {\n                    const parent = setter.parent\n                    const last = setter.last\n                    const value = parent[last]\n                    Object.defineProperty(parent, last, { value, writable: true })\n                    delete this.listeners.setters[absPath]\n                }\n            } else return false\n\n            delete this.listeners.lookup.symbol[sub] // Remove from global listener collection\n\n            const nameLookup = this.listeners.lookup.name[info.name]\n            delete nameLookup[info.id]\n            if (!Object.getOwnPropertyNames(nameLookup).length )delete this.listeners.lookup.name[info.name]\n\n    }\n}", "import Monitor from './Monitor'\n\n\n\nexport default Monitor \n\n// export {\n//     Monitor\n// }"],
  "mappings": "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",
  "names": []
}
