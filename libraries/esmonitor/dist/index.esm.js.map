{
  "version": 3,
  "sources": ["../../common/check.js", "../src/utils.ts", "../src/Poller.ts", "../src/listeners.ts", "../src/global.ts", "../src/info.ts", "../src/globals.ts", "../../esc/standards.js", "../../common/pathHelpers.ts", "../src/inspectable/handlers.ts", "../src/inspectable/define.ts", "../../escompose/src/globals.ts", "../src/inspectable/index.ts", "../src/optionsHelpers.ts", "../../common/drill.js", "../src/Monitor.ts", "../src/index.ts"],
  "sourcesContent": ["const moduleStringTag = '[object Module]'\n\nexport const esm = (object) => {\n    const res = object && (!!Object.keys(object).reduce((a,b) => {\n        const desc = Object.getOwnPropertyDescriptor(object, b)\n        const isModule = (desc && desc.get && !desc.set) ? 1 : 0\n        return a + isModule\n    }, 0) || Object.prototype.toString.call(object) === moduleStringTag)\n\n    return !!res\n}", "import { Options } from \"../../common/types\"\nimport { ArrayPath, MonitorOptions } from \"./types\"\n\n\nexport const isSame = (a,b) => {\n    if (a && typeof a === 'object' && b && typeof b === 'object') {\n        const jA = JSON.stringify(a)\n        const jB = JSON.stringify(b)\n        return jA === jB\n    } else return a === b\n}\n\n\nexport const iterateSymbols = (obj, callback) => {\n    return Promise.all(Object.getOwnPropertySymbols(obj).map((sym: symbol) => callback(sym, obj[sym])))\n}\n\nexport const  getPath = (type, info) => {\n    const pathType = info.path[type]\n    if (!pathType) throw new Error('Invalid Path Type')\n    const filtered = pathType.filter((v) => typeof v === 'string')\n    return filtered.join(info.keySeparator)\n}\n\nexport const getPathInfo = (path, options: MonitorOptions) => {\n    let splitPath = path\n    if (typeof path === 'string') splitPath = path.split(options.keySeparator)\n    else if (typeof path === 'symbol') splitPath = [path]\n    return {\n        id: splitPath[0],\n        path: splitPath.slice(1) as ArrayPath,\n    }\n}\n\nexport const runCallback = (callback, path, info, output, setGlobal=true) => {\n    if (callback instanceof Function) {\n        \n        // Promises\n        if (output && typeof output === 'object' && typeof output.then === 'function') output.then(value => callback(path, info, value))\n\n        // Normal\n        else callback(path, info, output)\n    }\n\n    // ------------------ Set Manually in Inspected State ------------------\n    if (setGlobal && globalThis.ESMonitorState) {\n        const callback = globalThis.ESMonitorState.callback\n        globalThis.ESMonitorState.state[path] = { output, value: info }\n        runCallback(callback, path, info, output, false)\n    }\n}", "import * as utils from './utils'\nimport { ListenerInfo, PollingOptions, ReferenceShortcut } from './types'\n\nconst defaultSamplingRate = 60\n\nexport default class Poller {\n\n    #pollingId?: NodeJS.Timer;\n    #sps: number;\n\n    listeners: {[x:symbol]: ListenerInfo} = {}\n\n    get sps(){\n        return this.#sps\n    }\n\n    set sps(sps: number) {\n        this.#sps = sps\n\n        const listeners = this.listeners\n        const nListeners = Object.keys(listeners).length\n        if (nListeners){\n            this.stop()\n            this.start()\n        }\n    }\n\n    constructor(\n        listeners?: Poller['listeners'],\n        sps?: Poller['sps']\n    ) {\n        if (listeners) this.listeners = listeners // Initialize listeners externally\n        if (sps) this.sps = sps // Set sampling rate externally\n    }\n\n    setOptions = (opts: PollingOptions = {}) => {\n        for (let key in opts) this[key] = opts[key] // Merge polling option\n    }\n\n\n    // Basic Object Manipulation\n    add = (info: ListenerInfo) => {\n        const sub = info.sub\n        this.listeners[sub] = info\n        this.start() // Start polling if not already started\n        return true\n    }\n    get = (sub: ListenerInfo['sub']) => this.listeners[sub]\n    remove = (sub: ListenerInfo['sub']) => {\n        delete this.listeners[sub]\n        if (!Object.keys(this.listeners).length) this.stop() // Stop polling if no listeners\n    }\n\n    // Poll Listeners\n    poll = (listeners) => {\n        utils.iterateSymbols(listeners, (sym, o) => {\n            let { callback, current, history } = o\n\n            // Resolving the path once\n            if (!o.path.resolved) o.path.resolved = utils.getPath('output', o)\n\n            if (!utils.isSame(current, history)){\n                utils.runCallback(callback, o.path.resolved, {}, current)\n                if (typeof current === 'object') {\n                    if (Array.isArray(current)) history = [...current]\n                    else history = {...current}\n                } else listeners[sym].history = current\n            }\n        })\n    }\n\n    // Start Polling\n    start = (listeners = this.listeners) => {\n        if (!this.sps) this.sps = defaultSamplingRate // Set default sampling rate\n        else if (!this.#pollingId) {\n            console.warn('[escode]: Starting Polling!')\n            this.#pollingId = setInterval(() => this.poll(listeners), 1000/this.sps)\n        }\n    }\n\n    // Stop Polling\n    stop = () => {\n        if (this.#pollingId) {\n            console.warn('[escode]: Stopped Polling!')\n            clearInterval(this.#pollingId)\n            this.#pollingId = undefined\n        }\n    }\n}\n", "import { ArrayPath, ListenerInfo, ListenerLookups, ListenerPool, ListenerRegistry, MonitorOptions, ReferenceShortcut } from \"./types\"\nimport * as utils from './utils'\nimport * as infoUtils from './info'\nimport { isProxy } from './globals'\nimport { getFromPath } from \"../../common/pathHelpers\"\nimport { setFromOptions } from \"./optionsHelpers\"\n\nexport const info = (id, callback, path, originalValue, base, listeners, options: MonitorOptions, refShortcut: Partial<ReferenceShortcut> = {}) => {\n    if (typeof path === 'string') path = path.split(options.keySeparator)\n    const relativePath = path.join(options.keySeparator)\n\n    const refs = base\n\n    const shortcutRef = refShortcut.ref\n    const shortcutPath = refShortcut.path\n\n    const get = (path: ArrayPath) => {\n        const thisBase = shortcutRef ?? base\n \n        const res = getFromPath(thisBase, path, {\n            keySeparator: options.keySeparator,\n            fallbacks: options.fallbacks,\n        })\n\n        return res\n    }\n\n    const set = (path: ArrayPath, value) => {\n        const thisBase = shortcutRef ?? base\n\n        setFromOptions(path, value, options, {\n            reference: thisBase,\n            listeners\n        })\n    }\n\n    // Derive onUpdate Function\n    let onUpdate = options.onUpdate\n    let infoToOutput = {}\n\n    if (onUpdate && typeof onUpdate === 'object' && onUpdate.callback instanceof Function) {\n        infoToOutput = onUpdate.info ?? {}\n        onUpdate = onUpdate.callback\n    }\n\n    const absolute = [id, ...path]\n    let pathInfo = {\n        absolute,\n        relative: relativePath.split(options.keySeparator),\n        parent: absolute.slice(0,-1)\n    } as Partial<ListenerInfo['path']>\n\n    pathInfo.output =  pathInfo[options.pathFormat]\n    const completePathInfo = pathInfo as ListenerInfo['path']\n\n    const info = {\n        id, \n        path: completePathInfo, \n        keySeparator: options.keySeparator,\n\n        infoToOutput,\n        callback: (...args) => {\n            const output = callback(...args)\n            \n            // ------------------ Run onUpdate Callback ------------------\n            if (onUpdate instanceof Function) onUpdate(...args)\n\n            // Return Standard Output\n            return output\n        }, \n        get current() { return get(shortcutPath ?? info.path.absolute) },\n        set current(val) { set(shortcutPath ?? info.path.absolute, val) },\n        get parent() { \n            return get(shortcutPath ? shortcutPath?.slice(0,-1) : info.path.parent) \n        },\n        get reference(){ return refs[id] },\n        set reference(val){ refs[id] = val },\n        original: originalValue,\n        history: (typeof originalValue === 'object') ? Object.assign({}, originalValue) : originalValue,\n        sub: Symbol('subscription'),\n        last: path.slice(-1)[0],\n    } as ListenerInfo\n\n    return info\n}\n\n\nconst registerInLookup = (name, sub, lookups) => {\n\n    if (lookups) {\n        const id = Math.random()\n        lookups.symbol[sub] = {\n            name,\n            id \n        } // set in lookup\n        if (!lookups.name[name]) lookups.name[name] = {}\n        lookups.name[name][id] = sub\n    }\n}\n\nexport const register = (info, collection, lookups?: ListenerLookups) => {\n    // Place in Function Registry\n    const absolute = utils.getPath('absolute', info)\n    if (!collection[absolute]) collection[absolute] = {}\n    collection[absolute][info.sub] = info\n\n    // Place in Lookup Registry\n    registerInLookup(absolute, info.sub, lookups)\n    return true\n}\n\nconst listeners = {\n    functions, \n    setters\n}\n\n// Set Listener with Minimal Information\nexport const set = (type, absPath, value, callback, base, allListeners: Partial<ListenerRegistry>, options: MonitorOptions) => {\n\n    const { id, path } = utils.getPathInfo(absPath, options)\n\n    const fullInfo = info(id, callback, path, value, base, listeners, options)\n\n    // ------------------ Set Listener in Registry ------------------\n    if (listeners[type]) listeners[type](fullInfo, allListeners, allListeners.lookup) // goes up to register()\n    else {\n        const path = utils.getPath('absolute', fullInfo)\n        allListeners[type][path][fullInfo.sub] = fullInfo\n        if (allListeners.lookup) registerInLookup(path, fullInfo.sub, allListeners.lookup)\n    }\n}\n\nconst get = (info, collection) => collection[utils.getPath('absolute', info)]\n\n\nconst handler = (info, collection, subscribeCallback, lookups?: ListenerLookups) => {\n    \n    // Create Listener for this Object\n    let success = !!get(info, collection)\n    if (!success) {\n        let parent = info.parent\n        let val = parent?.[info.last] // Parent may not exist yet...but we still want to register a potential listener\n        success = subscribeCallback(val, parent)\n    }\n\n    // Register in Collection\n    // if (success) \n    return register(info, collection, lookups)\n    // else console.warn('Listener revoked for non-existent parent:', info.path.absolute ) \n}\n\n\nexport const setterExecution = (listeners, value) => {\n    return utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path,  {}, value)\n    })\n}\n\nexport function setters (info: ListenerInfo, collection: ListenerPool, lookups?: ListenerLookups) {\n\n    const thisValue = this \n    return handler(info, collection['setters'], (value, parent) => {\n\n        let val = value\n        if (!parent) return\n\n        if (!parent[isProxy]) { \n\n            let redefine = true\n            try {\n                delete parent[info.last] // removing original definition\n            }  catch (e) {\n                console.error('Unable to redeclare setters. May already be a dynamic object...')\n                redefine  = false\n            }\n\n            if (redefine) {\n                const isGraphScriptProperty = info.last.slice(0,2) === '__' || info.last === 'default'\n                try {\n                    Object.defineProperty(parent, info.last, {\n                        get: () => val,\n                        set: async (v) => {\n                            const isFunction = typeof val === 'function'\n                            val = v\n                            if (!isFunction) {\n                                const listeners = Object.assign({}, collection['setters'][utils.getPath('absolute', info)])\n                                setterExecution(listeners, v)\n                            }\n                            else val = getProxyFunction.call(thisValue, info, collection, val)\n                        },\n                        enumerable: !isGraphScriptProperty,\n                        configurable: true // TODO: Ensure that you are removing later...\n                    })\n                } catch (e) {\n                    throw e\n                }\n            }\n        }\n    }, lookups)\n}\n\n\nexport function getProxyFunction(info, collection, fn) {\n    return function (...args) {\n        const listeners = collection['functions'][utils.getPath('absolute', info)]\n        const res = functionExecution(this, listeners, fn ?? info.original, args)\n        return res.output // Return Standard Output\n    }\n}\n\nexport const functionExecution = (context, listeners, func, args) => {\n    listeners = Object.assign({}, listeners)\n    const keys = Object.getOwnPropertySymbols(listeners)\n    const infoTemplate = listeners[keys[0]] ?? {} as ListenerInfo // Info is same, callback is different\n    const executionInfo = infoUtils.get((...args) => func.call(context, ...args), args, infoTemplate.infoToOutput)\n\n    utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path, executionInfo.value, executionInfo.output)\n    })\n\n    return executionInfo\n}\n\n\nexport function functions (info: ListenerInfo, collection: ListenerPool, lookups?: ListenerLookups) {\n\n    // Register for functions\n    return handler(info, collection['functions'], (_, parent) => {      \n        if (!parent[isProxy]) { \n            parent[info.last] = getProxyFunction.call(this, info, collection)\n\n            // Also register as a setter\n            return setters(info, collection, lookups)\n        }\n    }, lookups)\n}", "import { Info } from \"./types\";\n\ntype GlobalESMonitorState = {\n    state: {[x:string]: {output: any, value: any}},\n    callback?: Function | undefined,\n    info: Info\n}\n\ndeclare global {\n    interface Window { ESMonitorState: GlobalESMonitorState; }\n}\n\n// ------------- Global Inspectable (monitored for all changes) -------------\nglobalThis.ESMonitorState = {\n    state: {},\n    callback: undefined,\n    info: {}\n} as GlobalESMonitorState\n\n\nexport default globalThis.ESMonitorState", "import global from './global'\nimport { ActiveInfo } from './types'\n\nexport const performance = async (callback, args) => {\n    \n    const tic = globalThis.performance.now()\n    const output = await callback(...args)\n    const toc = globalThis.performance.now()\n    \n    return {\n        output,\n        value: toc - tic\n    }\n}\n\nconst infoFunctions = {\n    performance\n}\n\nexport const get = (func, args, info) => {\n\n    let result = {\n        value: { },\n        output: undefined,\n    } as {\n        value: ActiveInfo,\n        output: any\n    }\n    \n    \n    const infoToGet = {...global.info, ...info}\n\n    for (let key in infoToGet)  {\n        if (infoToGet[key] && infoFunctions[key]) {\n            const ogFunc = func\n            func = async (...args) => {\n                const o = await infoFunctions[key](ogFunc, args)\n                result.value[key] = o.value\n                return o.output\n            }   \n        }\n    }\n\n    result.output = func(...args)\n    return result\n}", "export const isProxy = Symbol(\"isProxy\")\n\nexport const fromInspectable = Symbol(\"fromInspectable\")\n\nexport const fromInspectableHandler = Symbol(\"fromInspectableHandler\")", "export const keySeparator = '.'\n\nexport const defaultPath = 'default'\n\nexport const esSourceKey = '__esmpileSourceBundle'\n\n\nexport const defaultProperties = {\n    isGraphScript: '__', // Includes path\n    properties: '__props',\n\n    default: defaultPath,\n    parent: '__parent',\n    promise: '__childresolved',\n\n    component: '__component',\n    proxy: '__proxy' // Handled by ESMonitor for Listeners\n}\n\nexport const specialKeys = {\n\n   ...defaultProperties,\n\n    start: '__onconnected', // asked to start\n    stop: '__ondisconnected',\n    connected: '__connected', // wait until connected\n    resolved: '__resolved', // wait until fully resolved\n    started: '__started', // wait until started\n\n    element: '__element',\n    webcomponents: '__define',\n    attributes: '__attributes',\n\n    listeners: {\n        value: '__listeners',\n        branch: '__branch',\n        bind: '__bind',\n        trigger: '__trigger',\n        format: '__format',\n    },\n\n    trigger: '__trigger',\n    compose: '__compose',\n    apply: '__apply',\n\n    // Internal to Compose\n    uri: 'src',\n    reference: 'ref',\n\n    childPosition: '__childposition',\n\n    attribute: 'escomponent',\n    options: '__options',\n\n    source: '__source',\n    path: '__path',\n\n    animate: '__animate',\n    states: '__states',\n\n    editor: '__editor',\n\n    original: '__original',\n\n    resize: '__onresize',    \n}", "import { PathFormat, SetValueOptions } from \"../esmonitor/src/types\"\nimport * as standards from '../esc/standards'\nimport { deep } from \"./clone\"\n\nconst hasKey = (key, obj) =>  key in obj\n\n\nconst getShortcut = (path, shortcuts, keySeparator) => {\n    const sc = shortcuts[path[0]]\n    if (sc) {\n        const value = sc[path.slice(1).join(keySeparator)]\n        if (value) return value\n    }\n}\n\nexport const getFromPath = (baseObject, path, opts: any = {}) => {\n\n\n    const fallbackKeys = opts.fallbacks ?? []\n    const keySeparator = opts.keySeparator ?? standards.keySeparator\n\n    if (opts.shortcuts) {\n        const shortcut = getShortcut(path, opts.shortcuts, keySeparator)\n        if (shortcut) {\n            if (opts.output === 'info') return { value: shortcut, exists: true, shortcut: true }\n            else return shortcut\n        }\n    }\n\n\n    if (typeof path === 'string') path = path.split(keySeparator).flat()\n    else if (typeof path == 'symbol') path = [path]\n\n    let exists;\n    path = [...path]\n\n    path = path.map(o => (typeof o === \"string\") ? o.split(keySeparator) : o).flat()\n\n\n    let ref =  baseObject\n    const chain = [ref]\n    \n    for (let i = 0; i < path.length; i++) {\n\n        if (ref) {\n\n            const str = path[i]\n            \n            // Try Standard Path\n            exists = hasKey(str, ref)\n\n            if (exists) ref = ref[str]\n            else {\n                ref = undefined\n                exists = true\n            }\n\n            chain.push(ref)\n        }\n    }\n\n    if (opts.output === 'info') return { value: ref, exists,  parent: chain[chain.length - 2] }\n    else return ref\n}\n\n\nexport const setFromPath = (path: PathFormat, value: any, ref:any, opts: SetValueOptions = {}) => {\n    const create = opts?.create ?? false\n    const keySeparator = opts?.keySeparator ?? standards.keySeparator\n\n    if (typeof path === 'string') path = path.split(keySeparator)\n    else if (typeof path == 'symbol') path = [path]\n    path = [...path]\n\n    const copy = [...path]\n    const last = copy.pop() as string | symbol\n\n    for (let i = 0; i < copy.length; i++) {\n        const str = copy[i]  \n        let has = hasKey(str, ref)\n        \n        // Create if not found\n        if (create && !has) {\n            ref[str] = {}\n            has = true\n        }\n\n        // Swap reference\n        if (has) ref = ref[str]\n    }\n\n    ref[last] = value\n\n    return true\n}", "import * as listenerUtils from \"../listeners\";\nimport { runCallback } from \"../utils\";\nimport { \n    fromInspectable,\n    isProxy \n} from '../globals'\nimport Inspectable from \".\";\nimport define from \"./define\";\n\nexport const functions = function () {\n    const inspectable = this as Inspectable\n    return {\n        apply: async function (target, thisArg, argumentsList) {\n            try {\n\n                let foo = target\n                const isFromInspectable = argumentsList[0]?.[fromInspectable] \n                if (isFromInspectable) {\n                    foo = argumentsList[0].value\n                    argumentsList = argumentsList.slice(1)\n                }\n\n\n\n                let listeners = inspectable.listeners.functions\n                // Notify of Function Execution\n                const pathStr = inspectable.path.join(inspectable.options.keySeparator)\n\n                const toActivate =  (listeners) ? listeners[pathStr] : undefined\n                let output, executionInfo: any = {};\n\n                if (toActivate){\n                    executionInfo = listenerUtils.functionExecution(thisArg, toActivate, foo, argumentsList)\n                    output = executionInfo.output\n                } \n                \n                // Default Behavior\n                else {\n                    output = foo.apply(thisArg, argumentsList);\n                    executionInfo = inspectable?.state?.[pathStr]?.value ?? {}\n                }\n\n                \n                // Notify with Proxy Callback\n                const callback = inspectable.options.callback\n\n                runCallback(callback, pathStr, executionInfo, output)\n\n                // Return output to function\n                return output\n\n            } catch (e) {\n                console.warn(`Function failed:`, e, inspectable.path);\n            }\n        }\n    };\n}\n\nexport const objects = function () {\n    const inspectable = this as Inspectable\n    return {\n\n        get (target, prop, receiver) {\n            if (prop === isProxy) return true;\n            return Reflect.get(target, prop, receiver);\n        },\n        \n        set(target, prop, newVal, receiver) {   \n                        \n\n            if (prop === isProxy) return true;\n\n            const pathStr = [...inspectable.path, prop].join(inspectable.options.keySeparator)\n\n            const isFromProxy = newVal?.[isProxy]\n            const isFromInspectable = newVal?.[fromInspectable]\n            if (isFromInspectable) newVal = newVal.value\n\n            const listeners = inspectable.listeners.setters \n\n            // Set New Listeners Automatically (if global callback is specified)\n            const desc = Object.getOwnPropertyDescriptor(target, prop)\n            const createListener = desc && !desc.get && !desc.set\n\n            if (createListener) {\n                if (typeof inspectable.options.globalCallback === 'function') {\n                    const id = inspectable.path[0]\n                    define.call(inspectable, prop, true) // Get notified when changed on the target\n                    listenerUtils.set('setters', pathStr, newVal, inspectable.options.globalCallback, {[id]: inspectable.root}, inspectable.listeners, inspectable.options)\n                }\n            }\n\n\n            // Create Proxies for Objects\n            if (newVal || typeof newVal === 'function') {\n                const newProxy = inspectable.create(prop, target, newVal)\n                if (newProxy) newVal = newProxy\n            }\n\n            const toActivate = !isFromProxy\n            if (\n                listeners \n                && toActivate // Don't manually trigger for proxies\n                && !inspectable.newKeys.has(prop) // Don't manually trigger for new keys\n            ) {\n                const toActivate = listeners[pathStr]\n                if (toActivate) listenerUtils.setterExecution(toActivate, newVal) // run callbacks\n            }\n\n            const callback = inspectable.options.callback\n            const info = inspectable?.state?.[pathStr]?.value ?? {}\n            runCallback(callback, pathStr, info, newVal)\n\n            if (isFromInspectable || !toActivate) return true\n            else return Reflect.set(target, prop, newVal, receiver);\n        },\n        // deleteProperty(target, key) {\n        //     console.log('Delete', key)\n        //     // if (!(key in target)) { return false; }\n        //     // return target.removeItem(key);\n        //     return true\n        // }\n    }\n}\n", "import { fromInspectable, isProxy } from \"../globals\"\n\nfunction define(key, registerAsNewKey: boolean) {\n\n    const inspectable = this\n\n    const target = this.target\n\n    if (!this.parent) {\n        let value = target[key]\n\n            try {\n                Object.defineProperty(target, key, {\n                    get: () => value,\n\n                    // Support setting from inspectable too\n                    set: function (val) {\n                        value = val\n                        inspectable.proxy[key] = {[isProxy]: this[isProxy], [fromInspectable]: true, value: val}\n                    },\n                    enumerable: true,\n                    configurable: true // TODO: Ensure that you are removing later...\n                })\n\n            } catch (e) {\n                console.error(`Could not reassign ${key} to a top-level setter...`)\n            }\n    }\n\n    if (registerAsNewKey) this.newKeys.add(key)\n\n    // Create More Proxies Inside\n    this.create(key, target, undefined, true)\n}\n\nexport default define;", "export const isNode = typeof process === 'object'\n", "import * as handlers from './handlers';\nimport * as check from '../../../common/check'\nimport { ArrayPath, ListenerRegistry, InspectableOptions } from '../types';\nimport * as standards from '../../../esc/standards'\nimport { setFromPath } from '../../../common/pathHelpers';\nimport { isProxy } from '../globals';\nimport define from './define';\nimport { isNode } from '../../../escompose/src/globals';\n\nexport type InspectableProxy = ProxyConstructor & {\n    __proxy: ProxyConstructor,\n    __esInspectable: Inspectable\n}\n\n\nconst canCreate = (parent, key?, val?) => {\n\n    try {\n        if (val === undefined) val = parent[key]\n    } catch (e) {\n        return e\n    }\n\n    // Check if we already have a proxy\n    const alreadyIs = parent[key] && parent[key][isProxy]\n    if (alreadyIs) return false // Already a proxy\n\n\n    const type = typeof val\n    const isObject = type === 'object'\n    const isFunction = type == 'function'\n    \n\n    // Only listen to objects and functions\n    const notObjOrFunc = !val || !(isObject || isFunction )\n    if (notObjOrFunc) return false\n\n    if (!isNode && val instanceof Element) return false // Avoid HTML elements\n    if (val instanceof EventTarget) return false // Avoid HTML elements\n\n    const isESM = isObject && check.esm(val)\n\n    if (isFunction) return true\n    else {\n        \n        const desc = Object.getOwnPropertyDescriptor(parent, key)\n\n        if (desc &&((desc.value && desc.writable) || desc.set)) {\n            if (!isESM) return true // Cannot create a Proxy object for ESM\n        } else if (!parent.hasOwnProperty(key)) return true\n    }\n\n    return false\n\n}\n\nexport default class Inspectable {\n\n    path: ArrayPath = []\n    parent?: Inspectable\n    options: InspectableOptions\n    proxy: ProxyConstructor\n    listeners: Partial<ListenerRegistry> = {}\n    newKeys = new Set()\n\n    target: any\n    root: any\n\n    state: {[x:string]: any} = {}\n\n    constructor ( target:any = {}, opts: Partial<InspectableOptions> = {}, name?, parent?) {\n\n        if (!opts.pathFormat) opts.pathFormat = 'relative'\n        if (!opts.keySeparator) opts.keySeparator = standards.keySeparator\n\n        // -------------- Only Listen to ES Components --------------\n\n        if (target.__proxy) this.proxy = target.__proxy\n        else if (target[isProxy]) this.proxy = target\n        else {\n\n            this.target = target\n            this.options = opts as InspectableOptions\n            this.parent = parent\n\n            if (this.parent) {\n                this.root = this.parent.root\n                this.path = [...this.parent.path]\n                this.state = this.parent.state ?? {} // Share state with the parent\n            } else this.root = target\n\n            if (name) this.path.push(name)\n            if (this.options.listeners) this.listeners = this.options.listeners\n\n            if (this.options.path) {\n                if (this.options.path instanceof Function) this.path = this.options.path(this.path)\n                else if (Array.isArray(this.options.path)) this.path = this.options.path\n                else console.log('Invalid path', this.options.path)\n            }\n\n            // remove symbols from the path\n            if (this.path) this.path = this.path.filter(str => typeof str === 'string')\n\n\n            if (!this.options.keySeparator) this.options.keySeparator = standards.keySeparator\n\n            let type = this.options.type\n            if (type != 'object') type = (typeof target === 'function')  ? 'function' : 'object';\n\n            let handler =  handlers[`${type}s`].call(this)\n            if (type === 'function') handler = {...handler, ...handlers.objects.call(this)} // Functions have both\n\n            this.proxy = new Proxy(target, handler)\n\n            // Set status on original\n            Object.defineProperty(target, '__proxy', { value: this.proxy, enumerable: false })\n            Object.defineProperty(target, '__esInspectable', { value: this, enumerable: false })\n\n\n            // Create Nested Inspectable Proxies\n            for (let key in target) define.call(this, key)\n        }\n\n        return this.proxy as any // Replace class passed to the user with the proxy\n\n    }\n\n    set = (path, info, update) => {\n\n        this.state[path] = {\n            output: update,\n            value: info,\n        }\n\n        // Set on Proxy Object\n        setFromPath(path, update, this.proxy, { create: true });\n    }\n\n    check = canCreate\n\n    create = (key, parent, val?, set = false) => {\n\n        const create = this.check(parent, key, val)\n        if (val === undefined) val = parent[key] \n\n        if (create && !(create instanceof Error)) {\n            parent[key] = new Inspectable(val, this.options, key, this)\n            return parent[key]\n        }\n\n        if (set) {\n            try {\n                this.proxy[key] = val ?? parent[key] // Notify on initialization\n            } catch (e) {\n                const isESM = check.esm(parent)\n                const path = [...this.path, key]\n                console.error(`Could not set value (${path.join(this.options.keySeparator)})${isESM ? ' because the parent is an ESM.' : ''}`, isESM ? '' : e)\n            }\n        }\n\n        return\n    }\n}", "import { setFromPath } from \"../../common/pathHelpers\"\nimport Inspectable from \"./inspectable\"\nimport { MonitorOptions, SetFromOptionsType } from \"./types\"\n\nexport const setFromOptions = (path, value, baseOptions: MonitorOptions, opts: SetFromOptionsType) => {\n\n        const ref = opts.reference\n        \n        const id = (Array.isArray(path)) ? path[0] : (typeof path === 'string') ? path.split(baseOptions.keySeparator)[0] : path\n        let isDynamic = opts.hasOwnProperty('static') ? !opts.static : false\n\n        if (isDynamic && !globalThis.Proxy) {\n            isDynamic = false\n            console.warn('Falling back to using function interception and setters...')\n        }\n\n        if (isDynamic) {\n            value = new Inspectable(value, {\n                pathFormat: baseOptions.pathFormat,\n                keySeparator: baseOptions.keySeparator,\n                listeners: opts.listeners,\n                path: (path) => path.filter((str) => !baseOptions.fallbacks || !baseOptions.fallbacks.includes(str)),\n                // listenDeeper: ['__path'],\n                // listenDeeper: ['test']\n            }, id)\n        }\n\n        let options = {keySeparator: baseOptions.keySeparator, ...opts}\n        setFromPath(path, value, ref, options)\n\n        return value\n    }", "import { esm } from './check.js'\n\nexport const drillSimple = (obj, callback, options) => {\n\n    let accumulator = options.accumulator\n    if (!accumulator) accumulator = options.accumulator = {}\n\n    const ignore = options.ignore || []\n    const path = options.path || []\n    const condition = options.condition ||  true\n\n    const seen = []\n    const fromSeen = []\n    \n    let drill = (obj, acc={}, globalInfo) => {\n\n        for (let key in obj) {\n            if (ignore.includes(key)) continue\n            const val = obj[key]\n            const newPath = [...globalInfo.path, key]\n\n            const info = {\n                typeof: typeof val,\n                name: val?.constructor?.name,\n                simple: true,\n                object: val && typeof val === 'object',\n                path: newPath\n            }\n            if (info.object) {\n                const name = info.name\n\n                const isESM = esm(val) // make sure to catch ESM\n\n                if (isESM || name === 'Object' || name === 'Array') {\n                    info.simple = true\n                    const idx = seen.indexOf(val)\n                    if (idx !== -1) acc[key] =fromSeen[idx]\n                    else {\n                        seen.push(val)\n\n                        const pass = condition instanceof Function ? condition(key, val, info) : condition\n                        info.pass = pass\n                        \n                        acc[key] = callback(key, val, info)\n\n                        if (pass) {\n                            fromSeen.push(acc[key])\n                            acc[key] = drill(val, acc[key], {...globalInfo, path: newPath}) // Drill simple objects\n                        }\n                    }\n                } \n                else {\n                    info.simple = false\n                    acc[key] = callback(key, val, info)\n                }\n            } else acc[key] = callback(key, val, info)\n        } \n\n        return acc\n    }\n\n    return drill(obj, accumulator, { path })\n}", "import * as check from '../../common/check'\nimport Poller from './Poller'\n\nimport { PathFormat, InternalOptions, ListenerRegistry, ArrayPath, MonitorOptions, SetFromOptionsType } from './types'\nimport * as listeners from './listeners'\nimport { iterateSymbols, getPath, getPathInfo } from './utils'\nimport { drillSimple } from '../../common/drill'\nimport { getFromPath } from '../../common/pathHelpers'\n\nimport * as standards from '../../esc/standards'\nimport { setFromOptions } from './optionsHelpers'\n\nconst createLookup = () => {\n    return { symbol: {}, name: {} }\n}\n\n\nconst isNode = typeof process === 'object'\n\nexport default class Monitor {\n\n    poller = new Poller()\n\n    options: MonitorOptions = {\n        pathFormat: 'relative',\n        keySeparator: standards.keySeparator,\n    }\n    \n    listeners: ListenerRegistry = {\n        polling: this.poller.listeners,\n        functions: {},\n        setters: {},\n        lookup: createLookup()\n    }\n\n    references: {\n        [x:string | symbol]: {\n            [x:string | symbol]: any\n        }\n    } = {}\n\n    constructor(opts:Partial<MonitorOptions>={}){\n\n        // Make listener lookup non-enumerable\n        Object.defineProperty(this.listeners, 'lookup', {\n            value: createLookup(),\n            enumerable: false,\n            configurable: false\n        })\n\n        Object.assign(this.options, opts)\n        this.poller.setOptions(opts.polling)\n    }\n\n    get = (path, output?, reference = this.references) => {\n        return getFromPath(reference, path, {\n            keySeparator: this.options.keySeparator,\n            fallbacks: this.options.fallbacks,\n            output\n        })\n    }\n\n    set = (path, value, opts: SetFromOptionsType= {}) => {\n\n        const optsCopy = {...opts}\n        if (!optsCopy.reference) optsCopy.reference = this.references\n        if (!optsCopy.listeners) optsCopy.listeners = this.listeners\n\n        const set = setFromOptions(path, value, this.options, optsCopy)\n        return set\n    }\n\n    // A simple wrapper for listen()\n    on = (absPath: PathFormat, callback) => {\n        const info = getPathInfo(absPath, this.options)\n        return this.listen(info.id, callback, info.path)\n    }\n\n\n    getInfo = (label, callback, path, original) => {\n\n        const info = listeners.info(label, callback, path, original, this.references, this.listeners, this.options)\n        const id = Math.random()\n        const lookups = this.listeners.lookup\n        const name = getPath('absolute', info)\n        lookups.symbol[info.sub] = {\n            name,\n            id\n        }\n\n        if (!lookups.name[name]) lookups.name[name] = {}\n        lookups.name[name][id] = info.sub\n        \n        return info\n    }\n\n    listen = (id, callback, path: PathFormat = [], __internal: Partial<InternalOptions> = {}) => {\n\n\n        if (typeof path === 'string') path = path.split(this.options.keySeparator)\n        else if (typeof path === 'symbol') path = [path]\n\n        const arrayPath = path as ArrayPath\n\n        let baseRef = this.get(id)\n\n        if (!baseRef) {\n            console.error(`Reference does not exist.`, id)\n            return\n        }\n\n\n        if (!__internal.poll) __internal.poll = check.esm(baseRef) // Inherit ESM status\n        if (!__internal.seen) __internal.seen = []\n\n        const __internalComplete = __internal as InternalOptions\n\n        // Drill Reference based on Path\n        const thisPath = [id, ...arrayPath]\n        const ref = this.get(thisPath)\n\n\n        // Create listeners for Objects\n        const toMonitorInternally = (val, allowArrays=false) => {\n            const first = val && typeof val === 'object'\n            \n            // Only Objects\n            if (!first) return false\n\n            // No Elements\n            if (!isNode) {\n                const isEl = val instanceof Element\n                if(isEl) return false\n            }\n\n            if (allowArrays) return true\n            else return !Array.isArray(val)\n        }\n\n\n        // ------------------ Create Subscription ------------------\n\n        // Case #1: Subscribe to each object property individually\n        let subs = {}\n        let success = false\n        const subscribeAll = toMonitorInternally(ref, true)\n        if (subscribeAll) {\n\n            if (ref.__esInspectable) ref.__esInspectable.options.globalCallback = callback\n\n            drillSimple(ref, (_, __, drillInfo) => {\n                if (drillInfo.pass) return \n                else {\n                    const fullPath = [...arrayPath, ...drillInfo.path]\n                    const internalSubs = this.listen(id, callback, fullPath, __internalComplete) // subscribe to all\n                    Object.assign(subs, internalSubs)\n                }\n            }, {\n                condition: (_, val) => toMonitorInternally(val)\n            })\n\n            success = true\n        } \n\n        // Case #2: Subscribe to specific property\n        let info;\n        try {\n            \n            // Force Polling\n            info = this.getInfo(id, callback, arrayPath, ref)\n\n            if (info && !success) {\n                if (__internalComplete.poll) success = this.poller.add(info)\n\n                // Direct Methods\n                else {\n\n                    let type = 'setters' // trigger setters\n                    if (typeof ref === 'function') type = 'functions' // intercept function calls\n\n                    success = this.add(type, info)\n                }\n            }\n            \n        } catch (e) {\n            console.error('Fallback to polling:', path, e)\n            success = this.poller.add(info)\n            // __internalComplete.poll = true\n        }\n        \n\n        if (success) {\n            subs[getPath('absolute', info)] = info.sub\n\n            // Notify User of Initialization\n            if (this.options.onInit instanceof Function) {\n                const executionInfo = {}\n                for (let key in info.infoToOutput) executionInfo[key] = undefined\n                this.options.onInit(getPath('output', info), executionInfo)\n            }\n\n            return subs\n        } else {\n            console.error('Failed to subscribe to:', path)\n            return\n        }\n    }\n\n    add = (type, info) => {\n        if (listeners[type]) return listeners[type](info, this.listeners, this.listeners.lookup)\n        else {\n            this.listeners[type][getPath('absolute', info)][info.sub] = info\n            return true\n        }\n    }\n\n    // Unsubscribe from a subscription\n    remove = (subs) => {\n\n        // Clear All Subscriptions if None Specified\n        if (!subs) {\n            subs = {\n                ...this.listeners.functions,\n                ...this.listeners.setters,\n                ...this.listeners.polling,\n            }\n        }\n\n\n        if (typeof subs!== 'object') subs = { sub: subs }\n\n        for (let key in subs) {\n\n            let innerSub = subs[key]\n\n            const handleUnsubscribe = (sub) => {\n                const res = this.unsubscribe(sub)\n                if (res === false) console.warn(`Subscription for ${key} does not exist.`, sub)\n            }\n\n            if (typeof innerSub !== 'symbol') iterateSymbols(innerSub, handleUnsubscribe)\n            else handleUnsubscribe(innerSub)\n        }\n\n        return true \n    }\n\n    unsubscribe = (sub) => {\n            const info = this.listeners.lookup.symbol[sub]\n            const absPath = info.name\n\n            // Remove from Polling listeners\n            const polling = this.poller.get(sub)\n\n            const funcs = this.listeners.functions[absPath]\n            const func = funcs?.[sub]\n            const setters = this.listeners.setters[absPath]\n            const setter = setters?.[sub]\n\n            if (polling) this.poller.remove(sub)\n            \n            // Reassign to Original Function\n            else if (func) {\n                delete funcs[sub]\n                if (!Object.getOwnPropertySymbols(funcs).length) {\n                    Object.defineProperty(func.parent, func.last, {\n                        value: func.original,\n                        writable: true\n                    })\n                    delete this.listeners.functions[absPath]\n                }\n            }\n            \n            // Transition Back to Standard Object\n            else if (setter) {\n                delete setters[sub]\n                if (!Object.getOwnPropertySymbols(setters).length) {\n                    const parent = setter.parent\n                    if (parent) {\n                        const last = setter.last\n                        const value = parent[last] // Parent always exists!\n                        Object.defineProperty(parent, last, { value, writable: true })\n                    }\n                    delete this.listeners.setters[absPath]\n                }\n            } else return false\n\n            delete this.listeners.lookup.symbol[sub] // Remove from global listener collection\n\n            const nameLookup = this.listeners.lookup.name[info.name]\n            delete nameLookup[info.id]\n            if (!Object.getOwnPropertyNames(nameLookup).length )delete this.listeners.lookup.name[info.name]\n\n    }\n}", "import Monitor from './Monitor'\n\n\n\nexport default Monitor \n\n// export {\n//     Monitor\n// }"],
  "mappings": "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",
  "names": []
}
