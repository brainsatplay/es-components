{
  "version": 3,
  "sources": ["../../common/check.js", "../src/utils.ts", "../src/Poller.ts", "../src/listeners.ts", "../src/global.ts", "../src/info.ts", "../src/globals.ts", "../../common/standards.ts", "../../common/pathHelpers.ts", "../src/inspectable/handlers.ts", "../src/inspectable/index.ts", "../src/optionsHelpers.ts", "../../common/drill.js", "../src/Monitor.ts", "../src/index.ts"],
  "sourcesContent": ["const moduleStringTag = '[object Module]'\n\nexport const esm = (object) => {\n    const res = object && (!!Object.keys(object).reduce((a,b) => {\n        const desc = Object.getOwnPropertyDescriptor(object, b)\n        const isModule = (desc && desc.get && !desc.set) ? 1 : 0\n        return a + isModule\n    }, 0) || Object.prototype.toString.call(object) === moduleStringTag)\n\n    return !!res\n}", "import { Options } from \"../../common/types\"\nimport { ArrayPath, MonitorOptions } from \"./types\"\n\n\nexport const isSame = (a,b) => {\n    if (a && typeof a === 'object' && b && typeof b === 'object') {\n        const jA = JSON.stringify(a)\n        const jB = JSON.stringify(b)\n        return jA === jB\n    } else return a === b\n}\n\n\nexport const iterateSymbols = (obj, callback) => {\n    return Promise.all(Object.getOwnPropertySymbols(obj).map((sym: symbol) => callback(sym, obj[sym])))\n}\n\nexport const  getPath = (type, info) => {\n    const pathType = info.path[type]\n    if (!pathType) throw new Error('Invalid Path Type')\n    const filtered = pathType.filter((v) => typeof v === 'string')\n    return filtered.join(info.keySeparator)\n}\n\n\nexport const getPathInfo = (path, options: MonitorOptions) => {\n    let splitPath = path\n    if (typeof path === 'string') splitPath = path.split(options.keySeparator)\n    else if (typeof path === 'symbol') splitPath = [path]\n    return {\n        id: splitPath[0],\n        path: splitPath.slice(1) as ArrayPath,\n    }\n}\n\nexport const runCallback = (callback, path, info, output, setGlobal=true) => {\n    if (callback instanceof Function) callback(path, info, output)\n\n    // ------------------ Set Manually in Inspected State ------------------\n    if (setGlobal && window.ESMonitorState) {\n        const callback = window.ESMonitorState.callback\n        window.ESMonitorState.state[path] = { output, value: info }\n        runCallback(callback, path, info, output, false)\n    }\n}", "import * as utils from './utils'\nimport { ListenerInfo, PollingOptions } from './types'\n\nconst defaultSamplingRate = 60\n\nexport default class Poller {\n\n    #pollingId?: NodeJS.Timer;\n    #sps: number;\n\n    listeners: {[x:symbol]: ListenerInfo} = {}\n\n    get sps(){\n        return this.#sps\n    }\n\n    set sps(sps: number) {\n        this.#sps = sps\n\n        const listeners = this.listeners\n        const nListeners = Object.keys(listeners).length\n        if (nListeners){\n            this.stop()\n            this.start()\n        }\n    }\n\n    constructor(\n        listeners?: Poller['listeners'],\n        sps?: Poller['sps']\n    ) {\n        if (listeners) this.listeners = listeners // Initialize listeners externally\n        if (sps) this.sps = sps // Set sampling rate externally\n    }\n\n    setOptions = (opts: PollingOptions = {}) => {\n        for (let key in opts) this[key] = opts[key] // Merge polling option\n    }\n\n\n    // Basic Object Manipulation\n    add = (info: ListenerInfo) => {\n        const sub = info.sub\n        this.listeners[sub] = info\n        this.start() // Start polling if not already started\n    }\n    get = (sub: ListenerInfo['sub']) => this.listeners[sub]\n    remove = (sub: ListenerInfo['sub']) => {\n        delete this.listeners[sub]\n        if (!Object.keys(this.listeners).length) this.stop() // Stop polling if no listeners\n    }\n\n    // Poll Listeners\n    poll = (listeners) => {\n        utils.iterateSymbols(listeners, (sym, o) => {\n            let { callback, current, history } = o\n\n            // Resolving the path once\n            if (!o.path.resolved) o.path.resolved = utils.getPath('output', o)\n\n            if (!utils.isSame(current, history)){\n                utils.runCallback(callback, o.path.resolved, {}, current)\n                if (typeof current === 'object') {\n                    if (Array.isArray(current)) history = [...current]\n                    else history = {...current}\n                } else listeners[sym].history = current\n            }\n        })\n    }\n\n    // Start Polling\n    start = (listeners = this.listeners) => {\n        if (!this.sps) this.sps = defaultSamplingRate // Set default sampling rate\n        else if (!this.#pollingId) {\n            console.warn('[escode]: Starting Polling!')\n            this.#pollingId = setInterval(() => this.poll(listeners), 1000/this.sps)\n        }\n    }\n\n    // Stop Polling\n    stop = () => {\n        if (this.#pollingId) {\n            console.warn('[escode]: Stopped Polling!')\n            clearInterval(this.#pollingId)\n        }\n    }\n}\n", "import { ListenerInfo, ListenerLookup, ListenerPool, ListenerRegistry, MonitorOptions } from \"./types\"\nimport * as utils from './utils'\nimport * as infoUtils from './info'\nimport { isProxy } from './globals'\nimport { getFromPath } from \"../../common/pathHelpers\"\nimport { setFromOptions } from \"./optionsHelpers\"\n\nexport const info = (id, callback, path, originalValue, base, listeners, options: MonitorOptions) => {\n    if (typeof path === 'string') path = path.split(options.keySeparator)\n    const relativePath = path.join(options.keySeparator)\n\n    const refs = base\n    const get = (path) => {\n        return getFromPath(base, path, {\n            keySeparator: options.keySeparator,\n            fallbacks: options.fallbacks,\n        })\n    }\n\n    const set = (path, value) => setFromOptions(path, value, options, {\n        reference: base,\n        listeners\n    })\n\n    // Derive onUpdate Function\n    let onUpdate = options.onUpdate\n    let infoToOutput = {}\n\n    if (onUpdate && typeof onUpdate === 'object' && onUpdate.callback instanceof Function) {\n        infoToOutput = onUpdate.info ?? {}\n        onUpdate = onUpdate.callback\n    }\n\n    const absolute = [id, ...path]\n    let pathInfo = {\n        absolute,\n        relative: relativePath.split(options.keySeparator),\n        parent: absolute.slice(0,-1)\n    } as Partial<ListenerInfo['path']>\n\n    pathInfo.output =  pathInfo[options.pathFormat]\n    const completePathInfo = pathInfo as ListenerInfo['path']\n\n    const info = {\n        id, \n        path: completePathInfo, \n        keySeparator: options.keySeparator,\n\n        infoToOutput,\n        callback: async (...args) => {\n            const output = await callback(...args)\n\n            // ------------------ Run onUpdate Callback ------------------\n            if (onUpdate instanceof Function) onUpdate(...args)\n\n            // Return Standard Output\n            return output\n        }, \n        get current() { return get(info.path.absolute) },\n        set current(val) { set(info.path.absolute, val) },\n        get parent() { return get(info.path.parent) },\n        get reference(){ return refs[id] },\n        set reference(val){ refs[id] = val },\n        original: originalValue,\n        history: (typeof originalValue === 'object') ? Object.assign({}, originalValue) : originalValue,\n        sub: Symbol('subscription'),\n        last: path.slice(-1)[0],\n    } as ListenerInfo\n\n    return info\n}\n\nexport const register = (info, collection, lookup?: ListenerLookup) => {\n    // Place in Function Registry\n    const absolute = utils.getPath('absolute', info)\n    if (!collection[absolute]) collection[absolute] = {}\n    collection[absolute][info.sub] = info\n    if (lookup) lookup[info.sub] = absolute // set in lookup\n}\n\nconst listeners = {\n    functions, \n    setters\n}\n\n// Set Listener with Minimal Information\nexport const set = (type, absPath, value, callback, base, allListeners: Partial<ListenerRegistry>, options: MonitorOptions) => {\n\n    const { id, path } = utils.getPathInfo(absPath, options)\n\n    const fullInfo = info(id, callback, path, value, base, listeners, options)\n\n    // ------------------ Set Listener in Registry ------------------\n    if (listeners[type]) listeners[type](fullInfo, allListeners[type], allListeners.lookup) // goes up to register()\n    else {\n        const path = utils.getPath('absolute', fullInfo)\n        allListeners[type][path][fullInfo.sub] = fullInfo\n        if (allListeners.lookup) allListeners.lookup[fullInfo.sub] = path // set in lookup\n    }\n}\n\nconst get = (info, collection) => collection[utils.getPath('absolute', info)]\n\n\nconst handler = (info, collection, subscribeCallback, lookup?: ListenerLookup) => {\n    \n    // Create Listener for this Object\n    if (!get(info, collection)) {\n        let parent = info.parent\n        let val = parent[info.last]\n        subscribeCallback(val, parent)\n    }\n\n    // Register in Collection\n    register(info, collection, lookup)\n}\n\n\nexport const setterExecution = async (listeners, value) => {\n    await utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path,  {}, value)\n    })\n}\n\nexport function setters (info: ListenerInfo, collection: ListenerPool, lookup?: ListenerLookup) {\n    handler(info, collection, (value, parent) => {\n        let val = value\n\n        if (!parent[isProxy]) { \n\n            let redefine = true\n            try {\n                delete parent[info.last] // removing original definition\n            }  catch (e) {\n                console.error('Unable to redeclare setters. May already be a dynamic object...')\n                redefine  = false\n            }\n\n            if (redefine) {\n                try {\n\n                    Object.defineProperty(parent, info.last, {\n                        get: () => val,\n                        set: async (v) => {\n                            val = v\n                            const listeners = Object.assign({}, collection[utils.getPath('absolute', info)])\n                            setterExecution(listeners, v)\n                        },\n                        enumerable: true,\n                        configurable: true // TODO: Ensure that you are removing later...\n                    })\n                } catch (e) {\n                    throw e\n                }\n            }\n        }\n    }, lookup)\n}\n\n\nexport const functionExecution = async (context, listeners, func, args) => {\n    listeners = Object.assign({}, listeners)\n    const keys = Object.getOwnPropertySymbols(listeners)\n    const infoTemplate = listeners[keys[0]] ?? {} as ListenerInfo // Info is same, callback is different\n    const executionInfo = await infoUtils.get(async (...args) => await func.call(context, ...args), args, infoTemplate.infoToOutput)\n\n    await utils.iterateSymbols(listeners, (_, o: ListenerInfo) => {\n        const path = utils.getPath('output', o)\n        utils.runCallback(o.callback, path, executionInfo.value, executionInfo.output)\n    })\n\n    return executionInfo\n}\n\n\nexport function functions (info: ListenerInfo, collection: ListenerPool, lookup?: ListenerLookup) {\n    handler(info, collection, (_, parent) => {      \n        if (!parent[isProxy]) { \n            parent[info.last] = async function(...args) {\n                const listeners = collection[utils.getPath('absolute', info)]\n                return functionExecution(this, listeners, info.original, args)\n            }\n        }\n    }, lookup)\n}", "import { Info } from \"./types\";\n\ntype GlobalESMonitorState = {\n    state: {[x:string]: {output: any, value: any}},\n    callback?: Function | undefined,\n    info: Info\n}\n\ndeclare global {\n    interface Window { ESMonitorState: GlobalESMonitorState; }\n}\n\n// ------------- Global Inspectable (monitored for all changes) -------------\nwindow.ESMonitorState = {\n    state: {},\n    callback: undefined,\n    info: {}\n} as GlobalESMonitorState\n\n\nexport default window.ESMonitorState", "import global from './global'\nimport { ActiveInfo } from './types'\n\nexport const performance = async (callback, args) => {\n    \n    const tic = globalThis.performance.now()\n    const output = await callback(...args)\n    const toc = globalThis.performance.now()\n    \n    return {\n        output,\n        value: toc - tic\n    }\n}\n\nconst infoFunctions = {\n    performance\n}\n\nexport const get = async (func, args, info) => {\n\n    let result = {\n        value: { },\n        output: undefined,\n    } as {\n        value: ActiveInfo,\n        output: any\n    }\n    \n    \n    const infoToGet = {...global.info, ...info}\n\n    for (let key in infoToGet)  {\n        if (infoToGet[key] && infoFunctions[key]) {\n            const ogFunc = func\n            func = async (...args) => {\n                const o = await infoFunctions[key](ogFunc, args)\n                result.value[key] = o.value\n                return o.output\n            }   \n        }\n    }\n\n    result.output = await func(...args)\n    return result\n}", "export const isProxy = Symbol(\"isProxy\")\n\nexport const fromInspectable = Symbol(\"fromInspectable\")", "export const keySeparator = '.'\n\nexport const defaultPath = 'default'", "import { isProxy } from \"../esmonitor/src/globals\"\nimport { PathFormat, SetValueOptions } from \"../esmonitor/src/types\"\nimport * as standards from './standards'\n\nconst hasKey = (key, obj) => {\n    return obj.hasOwnProperty(key) || key in obj\n}\n\nexport const getFromPath = (baseObject, path, opts: any = {}) => {\n    const fallbackKeys = opts.fallbacks ?? []\n    const keySeparator = opts.keySeparator ?? standards.keySeparator\n\n    if (typeof path === 'string') path = path.split(keySeparator)\n    else if (typeof path == 'symbol') path = [path]\n\n    let exists;\n    path = [...path]\n\n    let ref =  baseObject\n    let inInspectable = false // check if this parameter is nested in an esComponent\n    \n    for (let i = 0; i < path.length; i++) {\n\n        if (!ref) {\n            const message = `Could not get path`\n            console.error(message, path, ref)\n            throw new Error(message)\n        }\n\n        if (!inInspectable) inInspectable = !!ref.__esInspectable\n\n        const str = path[i]\n        // Try Inside ES Components\n        if (!hasKey(str, ref) && ref.hasOwnProperty('esComponents')) {\n            for (let i in fallbackKeys) {\n                const key = fallbackKeys[i]\n                if (hasKey(key, ref)) {\n                    ref = ref[key]\n                    break\n                }\n            }\n        }\n        \n        // Try Standard Path\n        exists = hasKey(str, ref)\n\n        if (exists) ref = ref[str]\n        else {\n            // Check if dynamic\n            if (!inInspectable) console.error(`Will not get updates from: ${path.filter(str => typeof str === 'string').join(keySeparator)}`)\n            else if (!ref.__esInspectable) console.warn('Might be ignoring incorrectly...')\n            return\n        }\n    }\n\n    if (opts.output === 'info') return { value: ref, exists }\n    else return ref\n}\n\n\nexport const setFromPath = (path: PathFormat, value: any, ref:any, opts: SetValueOptions = {}) => {\n    const create = opts?.create ?? false\n    const keySeparator = opts?.keySeparator ?? standards.keySeparator\n\n    if (typeof path === 'string') path = path.split(keySeparator)\n    else if (typeof path == 'symbol') path = [path]\n    path = [...path]\n\n    const copy = [...path]\n    const last = copy.pop() as string | symbol\n    for (let i = 0; i < copy.length; i++) {\n        const str = copy[i]  \n        let has = hasKey(str, ref)\n        \n        // Create if not found\n        if (create && !has) {\n            ref[str] = {}\n            has = true\n        }\n\n        // Swap reference\n        if (has) ref = ref[str]\n\n        // Throw error if not found\n        else {\n            const message = `Could not set path`\n            console.error(message, path)\n            throw new Error(message)\n        }\n\n        // Transfer to ESComponents automatically (if not second-to-last key...)\n        if (ref.esComponents) ref = ref.esComponents \n    }\n\n    ref[last] = value\n}", "import * as listenerUtils from \"../listeners\";\nimport { runCallback } from \"../utils\";\nimport { \n    fromInspectable,\n    // fromInspectable, \n    isProxy \n} from '../globals'\nimport Inspectable from \".\";\n\nexport const functions = (proxy: Inspectable) => {\n    return {\n        apply: async function (target, thisArg, argumentsList) {\n            try {\n\n                let foo = target\n                const isFromInspectable = argumentsList[0]?.[fromInspectable]\n                if (isFromInspectable) {\n                    foo = argumentsList[0].value\n                    argumentsList = argumentsList.slice(1)\n                }\n\n                let listeners = proxy.listeners.functions\n                // Notify of Function Execution\n                const pathStr = proxy.path.join(proxy.options.keySeparator)\n\n                const toActivate =  (listeners) ? listeners[pathStr] : undefined\n                let output, executionInfo: any = {};\n\n                if (toActivate){\n                    executionInfo = await listenerUtils.functionExecution(thisArg, toActivate, foo, argumentsList)\n                    output = executionInfo.output\n                } \n                \n                // Default Behavior\n                else {\n                    output = await foo.apply(thisArg, argumentsList);\n                    executionInfo = proxy?.state?.[pathStr]?.value ?? {}\n                }\n\n                \n                // Notify with Proxy Callback\n                const callback = proxy.options.callback\n\n                runCallback(callback, pathStr, executionInfo, output)\n\n                // Return output to function\n                return output\n\n            } catch (e) {\n                console.warn(`Function failed:`, e, proxy.path);\n            }\n        }\n    };\n}\n\nexport const objects = (proxy: Inspectable) => {\n    return {\n\n        get (target, prop, receiver) {\n            if (prop === isProxy) return true;\n            return Reflect.get(target, prop, receiver);\n        },\n        \n        set(target, prop, newVal, receiver) {\n            \n            \n            if (prop === isProxy) return true;\n            const pathStr = [...proxy.path, prop].join(proxy.options.keySeparator)\n\n            const isFromInspectable = newVal?.[fromInspectable]\n            if (isFromInspectable) newVal = newVal.value\n\n            const listeners = proxy.listeners.setters \n\n            // Set New Listeners Automatically (if global callback is specified)\n            if (!target.hasOwnProperty(prop)) {\n                if (typeof proxy.options.globalCallback === 'function') {\n                    const id = proxy.path[0]\n                    listenerUtils.set('setters', pathStr, newVal, proxy.options.globalCallback, {[id]: proxy.root}, proxy.listeners, proxy.options)\n                }\n            }\n\n\n            // Create Proxies for Objects\n            if (newVal) {\n                const newProxy = proxy.create(prop, target, newVal)\n                if (newProxy) newVal = newProxy\n            }\n\n            \n            if (listeners) {\n                const toActivate = listeners[pathStr]\n                if (toActivate) listenerUtils.setterExecution(toActivate, newVal) // run callbacks\n            }\n\n            const callback = proxy.options.callback\n            const info = proxy?.state?.[pathStr]?.value ?? {}\n            runCallback(callback, pathStr, info, newVal)\n\n            if (isFromInspectable) return true\n            else return Reflect.set(target, prop, newVal, receiver);\n        },\n        // deleteProperty(target, key) {\n        //     console.log('Delete', key)\n        //     // if (!(key in target)) { return false; }\n        //     // return target.removeItem(key);\n        //     return true\n        // }\n    }\n}\n", "import * as handlers from './handlers';\nimport * as check from '../../../common/check'\nimport { ArrayPath, ListenerRegistry, InspectableOptions } from '../types';\nimport * as standards from '../../../common/standards'\nimport { setFromPath } from '../../../common/pathHelpers';\nimport { isProxy, fromInspectable } from '../globals';\n\nexport type InspectableProxy = ProxyConstructor & {\n    __esProxy: ProxyConstructor,\n    __esInspectable: Inspectable\n}\n\n\nconst canCreate = (parent, key?, val?) => {\n\n    try {\n        if (val === undefined) val = parent[key]\n    } catch (e) {\n        return e\n    }\n\n    // Check if we already have a proxy\n    const alreadyIs = parent[key] && parent[key][isProxy]\n    if (alreadyIs) return false // Already a proxy\n\n\n    const type = typeof val\n    const isObject = type === 'object'\n    const isFunction = type == 'function'\n    \n\n    // Only listen to objects and functions\n    const notObjOrFunc = !val || !(isObject || isFunction )\n    if (notObjOrFunc) return false\n\n    if (val instanceof Element) return false // Avoid HTML elements\n    if (val instanceof EventTarget) return false // Avoid HTML elements\n\n    const isESM = isObject && check.esm(val)\n\n    if (isFunction) return true\n    else {\n        \n        const desc = Object.getOwnPropertyDescriptor(parent, key)\n\n        if (desc &&((desc.value && desc.writable) || desc.set)) {\n            if (!isESM) return true // Cannot create a Proxy object for ESM\n        } else if (!parent.hasOwnProperty(key)) return true\n    }\n\n    return false\n\n}\n\nexport default class Inspectable {\n\n    path: ArrayPath = []\n    parent?: Inspectable\n    options: InspectableOptions\n    proxy: ProxyConstructor\n    listeners: Partial<ListenerRegistry> = {}\n    target: any\n    root: any\n\n    state: {[x:string]: any} = {}\n\n    constructor ( target:any = {}, opts: Partial<InspectableOptions> = {}, name?, parent?) {\n\n        if (!opts.pathFormat) opts.pathFormat = 'relative'\n        if (!opts.keySeparator) opts.keySeparator = standards.keySeparator\n\n        // -------------- Only Listen to ES Components --------------\n\n        if (target.__esProxy) this.proxy = target.__esProxy\n        else if (target[isProxy]) this.proxy = target\n        else {\n\n            this.target = target\n            this.options = opts as InspectableOptions\n            this.parent = parent\n\n            if (this.parent) {\n                this.root = this.parent.root\n                this.path = [...this.parent.path]\n                this.state = this.parent.state ?? {} // Share state with the parent\n            } else this.root = target\n\n            if (name) this.path.push(name)\n            if (this.options.listeners) this.listeners = this.options.listeners\n\n            if (this.options.path) {\n                if (this.options.path instanceof Function) this.path = this.options.path(this.path)\n                else if (Array.isArray(this.options.path)) this.path = this.options.path\n                else console.log('Invalid path', this.options.path)\n            }\n\n            // remove symbols from the path\n            if (this.path) this.path = this.path.filter(str => typeof str === 'string')\n\n\n            if (!this.options.keySeparator) this.options.keySeparator = standards.keySeparator\n\n            let type = this.options.type\n            if (type != 'object') type = (typeof target === 'function')  ? 'function' : 'object';\n            const handler =  handlers[`${type}s`](this)\n\n            this.proxy = new Proxy(target, handler)\n\n            // Set status on original\n            Object.defineProperty(target, '__esProxy', { value: this.proxy, enumerable: false })\n            Object.defineProperty(target, '__esInspectable', { value: this, enumerable: false })\n\n\n            // Create Nested Inspectable Proxies\n            for (let key in target) {\n\n                if (!this.parent) {\n\n                    let value = target[key]\n\n                    // Intercept functions\n                    if (typeof value === 'function') {\n                        target[key] = async (...args) => {\n                            return await this.proxy[key]({ [fromInspectable]: true, value }, ...args)\n                        }\n                    } \n\n                    // Basic Getter / Setter for Original Input\n                    else {\n\n                        try {\n                            Object.defineProperty(target, key, {\n                                get: () => value,\n                                set: (val) => {\n                                    value = val\n                                    this.proxy[key] = {[fromInspectable]: true, value: val}\n                                },\n                                enumerable: true,\n                                configurable: true // TODO: Ensure that you are removing later...\n                            })\n\n                        } catch (e) {\n                            console.error(`Could not reassign ${key} to a top-level setter...`)\n                        }\n                    }\n                }\n\n                // Create More Proxies Inside\n                this.create(key, target, undefined, true)\n            }\n        }\n\n        return this.proxy as any // Replace class passed to the user with the proxy\n\n    }\n\n    set = (path, info, update) => {\n\n        this.state[path] = {\n            output: update,\n            value: info,\n        }\n\n        // Set on Proxy Object\n        setFromPath(path, update, this.proxy, { create: true });\n    }\n\n    check = canCreate\n\n    create = (key, parent, val?, set = false) => {\n\n        const create = this.check(parent, key, val)\n        if (val === undefined) val = parent[key] \n\n        if (create && !(create instanceof Error)) {\n            parent[key] = new Inspectable(val, this.options, key, this)\n            return parent[key]\n        }\n\n        if (set) {\n            try {\n                this.proxy[key] = val ?? parent[key] // Notify on initialization\n            } catch (e) {\n                const isESM = check.esm(parent)\n                const path = [...this.path, key]\n                console.error(`Could not set value (${path.join(this.options.keySeparator)})${isESM ? ' because the parent is an ESM.' : ''}`, isESM ? '' : e)\n            }\n        }\n\n        return\n    }\n}", "import { setFromPath } from \"../../common/pathHelpers\"\nimport Inspectable from \"./inspectable\"\nimport { MonitorOptions, SetFromOptionsType } from \"./types\"\n\nexport const setFromOptions = (path, value, baseOptions: MonitorOptions, opts: SetFromOptionsType) => {\n\n        const ref = opts.reference\n        \n        const id = (Array.isArray(path)) ? path[0] : (typeof path === 'string') ? path.split(baseOptions.keySeparator)[0] : path\n        let isDynamic = opts.hasOwnProperty('static') ? !opts.static : false\n\n        if (isDynamic && !globalThis.Proxy) {\n            isDynamic = false\n            console.warn('Falling back to using function interception and setters...')\n        }\n\n        if (isDynamic) {\n            value = new Inspectable(value, {\n                pathFormat: baseOptions.pathFormat,\n                keySeparator: baseOptions.keySeparator,\n                listeners: opts.listeners,\n                path: (path) => path.filter((str) => !baseOptions.fallbacks || !baseOptions.fallbacks.includes(str)),\n                // listenDeeper: ['__isESComponent'],\n                // listenDeeper: ['test']\n            }, id)\n        }\n\n        let options = {keySeparator: baseOptions.keySeparator, ...opts}\n        setFromPath(path, value, ref, options)\n\n        return value\n    }", "\nexport const drillSimple = (obj, callback, options) => {\n\n    let accumulator = options.accumulator\n    if (!accumulator) accumulator = options.accumulator = {}\n\n    const ignore = options.ignore || []\n    const path = options.path || []\n    const condition = options.condition ||  true\n\n    const seen = []\n    const fromSeen = []\n    \n    let drill = (obj, acc={}, globalInfo) => {\n\n        for (let key in obj) {\n            if (ignore.includes(key)) continue\n            const val = obj[key]\n            const newPath = [...globalInfo.path, key]\n\n            const info = {\n                typeof: typeof val,\n                name: val?.constructor?.name,\n                simple: true,\n                object: val && typeof val === 'object',\n                path: newPath\n            }\n            if (info.object) {\n                const name = info.name\n                if (name === 'Object' || name === 'Array') {\n                    info.simple = true\n                    const idx = seen.indexOf(val)\n                    if (idx !== -1) acc[key] =fromSeen[idx]\n                    else {\n                        seen.push(val)\n\n                        const pass = condition instanceof Function ? condition(key, val, info) : condition\n                        info.pass = pass\n                        \n                        acc[key] = callback(key, val, info)\n\n                        if (pass) {\n                            fromSeen.push(acc[key])\n                            acc[key] = drill(val, acc[key], {...globalInfo, path: newPath}) // Drill simple objects\n                        }\n                    }\n                } \n                else {\n                    info.simple = false\n                    acc[key] = callback(key, val, info)\n                }\n            } else acc[key] = callback(key, val, info)\n        } \n\n        return acc\n    }\n\n    return drill(obj, accumulator, { path })\n}", "import * as check from '../../common/check.js'\nimport Poller from './Poller.js'\n\nimport { PathFormat, InternalOptions, ListenerRegistry, ListenerLookup, ArrayPath, MonitorOptions, SetValueOptions, SetFromOptionsType } from './types'\nimport * as listeners from './listeners'\nimport { iterateSymbols, getPath, getPathInfo } from './utils.js'\nimport { drillSimple } from '../../common/drill.js'\nimport { getFromPath } from '../../common/pathHelpers.js'\n\nimport * as standards from '../../common/standards'\nimport { setFromOptions } from './optionsHelpers.js'\n\nexport default class Monitor {\n\n    poller = new Poller()\n\n    options: MonitorOptions = {\n        pathFormat: 'relative',\n        keySeparator: standards.keySeparator,\n    }\n    \n    listeners: ListenerRegistry = {\n        polling: this.poller.listeners,\n        functions: {},\n        setters: {},\n        lookup: {}\n    }\n\n    references: {\n        [x:string | symbol]: {\n            [x:string | symbol]: any\n        }\n    } = {}\n\n    constructor(opts:Partial<MonitorOptions>={}){\n\n        // Make listener lookup non-enumerable\n        Object.defineProperty(this.listeners, 'lookup', {\n            value: {},\n            enumerable: false,\n            configurable: false\n        })\n\n        Object.assign(this.options, opts)\n        this.poller.setOptions(opts.polling)\n    }\n\n    get = (path, output?) => {\n        return getFromPath(this.references, path, {\n            keySeparator: this.options.keySeparator,\n            fallbacks: this.options.fallbacks,\n            output,\n        })\n    }\n\n    set = (path, value, opts: SetFromOptionsType= {}) => {\n        const optsCopy = {...opts}\n        if (!optsCopy.reference) optsCopy.reference = this.references\n        if (!optsCopy.listeners) optsCopy.listeners = this.listeners\n        return setFromOptions(path, value, this.options, optsCopy)\n    }\n\n    // A simple wrapper for listen()\n    on = (absPath: PathFormat, callback) => {\n        const info = getPathInfo(absPath, this.options)\n        return this.listen(info.id, callback, info.path)\n    }\n\n\n    getInfo = (id, callback, path, original) => {\n        const info = listeners.info(id, callback, path, original, this.references, this.listeners, this.options)\n        this.listeners.lookup[info.sub] = getPath('absolute', info)\n        return info\n    }\n\n    listen = (id, callback, path: PathFormat = [], __internal: Partial<InternalOptions> = {}) => {\n\n\n        if (typeof path === 'string') path = path.split(this.options.keySeparator)\n        else if (typeof path === 'symbol') path = [path]\n\n        const arrayPath = path as ArrayPath\n\n        let baseRef = this.references[id]\n        if (!baseRef) {\n            console.error(`Reference ${id} does not exist.`)\n            return\n        }\n\n\n        if (!__internal.poll) __internal.poll = check.esm(baseRef) // Inherit ESM status\n        if (!__internal.seen) __internal.seen = []\n\n        const __internalComplete = __internal as InternalOptions\n\n        // Set Reference\n        if (!this.references[id]) this.references[id] = baseRef // Setting base reference\n\n        // Drill Reference based on Path\n        let ref = this.get([id, ...arrayPath])\n\n        // Create listeners for Objects\n        const toMonitorInternally = (val, allowArrays=false) => {\n            const first = val && typeof val === 'object'\n            \n            // Only Objects\n            if (!first) return false\n\n            // No Elements\n            const isEl = val instanceof Element\n            if(isEl) return false\n\n            if (allowArrays) return true\n            else return !Array.isArray(val)\n        }\n\n        // ------------------ Create Subscription ------------------\n\n        // Option #1: Subscribe to each object property individually\n        let subs = {}\n        if (toMonitorInternally(ref, true)) {\n\n            if (ref.__esInspectable) ref.__esInspectable.options.globalCallback = callback\n\n            drillSimple(ref, (_, __, drillInfo) => {\n                if (drillInfo.pass) return \n                else {\n                    const fullPath = [...arrayPath, ...drillInfo.path]\n                    const internalSubs = this.listen(id, callback, fullPath, __internalComplete) // subscribe to all\n                    Object.assign(subs, internalSubs)\n                }\n            }, {\n                condition: (_, val) => toMonitorInternally(val)\n            })\n        } \n\n        // Option #2: Subscribe to specific property\n        else {\n\n            let info;\n            try {\n                \n                // Force Polling\n                if (__internalComplete.poll) {\n                    info = this.getInfo(id, callback, arrayPath, ref)\n                    this.poller.add(info)\n                }\n\n                // Direct Methods\n                else {\n\n                    let type = 'setters' // trigger setters\n                    if (typeof ref === 'function') type = 'functions' // intercept function calls\n                    info = this.getInfo(id, callback, arrayPath, ref)\n                    this.add(type, info)\n                }\n                \n            } catch (e) {\n                console.error('Fallback to polling:', path, e)\n                info = this.getInfo(id, callback, arrayPath, ref)\n                this.poller.add(info)\n            }\n            \n\n            subs[getPath('absolute', info)] = info.sub\n\n            // Notify User of Initialization\n            if (this.options.onInit instanceof Function) {\n                const executionInfo = {}\n                for (let key in info.infoToOutput) executionInfo[key] = undefined\n                this.options.onInit(getPath('output', info), executionInfo)\n            }\n        }\n\n        return subs\n    }\n\n    add = (type, info) => {\n        if (listeners[type]) listeners[type](info, this.listeners[type], this.listeners.lookup)\n        else this.listeners[type][getPath('absolute', info)][info.sub] = info\n    }\n\n    // Unsubscribe from a subscription\n    remove = (subs) => {\n\n        // Clear All Subscriptions if None Specified\n        if (!subs) {\n            subs = {\n                ...this.listeners.functions,\n                ...this.listeners.setters,\n                ...this.listeners.polling,\n            }\n        }\n\n\n        if (typeof subs!== 'object') subs = { sub: subs }\n\n        for (let key in subs) {\n\n            let innerSub = subs[key]\n\n            const handleUnsubscribe = (sub) => {\n                const res = this.unsubscribe(sub)\n                if (res === false) console.warn(`Subscription for ${key} does not exist.`, sub)\n            }\n\n            if (typeof innerSub !== 'symbol') iterateSymbols(innerSub, handleUnsubscribe)\n            else handleUnsubscribe(innerSub)\n        }\n\n        return true \n    }\n\n    unsubscribe = (sub) => {\n            const absPath = this.listeners.lookup[sub]\n\n            // Remove from Polling listeners\n            const polling = this.poller.get(sub)\n\n            const funcs = this.listeners.functions[absPath]\n            const func = funcs?.[sub]\n            const setters = this.listeners.setters[absPath]\n            const setter = setters?.[sub]\n\n            if (polling) this.poller.remove(sub)\n            \n            // Reassign to Original Function\n            else if (func) {\n                delete funcs[sub]\n                if (!Object.getOwnPropertySymbols(funcs).length) func.current = func.original\n            }\n            \n            // Transition Back to Standard Object\n            else if (setter) {\n                delete setters[sub]\n                if (!Object.getOwnPropertySymbols(setters).length) {\n                    const parent = setter.parent\n                    const last = setter.last\n                    const value = parent[last]\n                    Object.defineProperty(parent, last, { value, writable: true })\n                }\n            } else return false\n\n            delete this.listeners.lookup[sub] // Remove from global listener collection\n    }\n}", "import Monitor from './Monitor'\n\n\n\nexport default Monitor \n\n// export {\n//     Monitor\n// }"],
  "mappings": "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",
  "names": ["moduleStringTag", "esm", "object", "a", "b", "desc", "isModule", "isSame", "a", "b", "jA", "jB", "iterateSymbols", "obj", "callback", "sym", "getPath", "type", "info", "pathType", "v", "getPathInfo", "path", "options", "splitPath", "runCallback", "output", "setGlobal", "defaultSamplingRate", "Poller", "listeners", "sps", "opts", "key", "info", "sub", "iterateSymbols", "sym", "callback", "current", "history", "getPath", "isSame", "runCallback", "#pollingId", "#sps", "listeners_exports", "__export", "functionExecution", "functions", "info", "register", "set", "setterExecution", "setters", "global_default", "performance", "callback", "args", "tic", "output", "toc", "infoFunctions", "get", "func", "info", "result", "infoToGet", "global_default", "key", "ogFunc", "o", "isProxy", "fromInspectable", "keySeparator", "hasKey", "key", "obj", "getFromPath", "baseObject", "path", "opts", "fallbackKeys", "keySeparator", "exists", "ref", "inInspectable", "i", "message", "str", "setFromPath", "value", "create", "copy", "last", "has", "handlers_exports", "__export", "functions", "objects", "functions", "proxy", "target", "thisArg", "argumentsList", "foo", "fromInspectable", "listeners", "pathStr", "toActivate", "output", "executionInfo", "functionExecution", "callback", "runCallback", "e", "objects", "prop", "receiver", "isProxy", "newVal", "isFromInspectable", "id", "set", "newProxy", "setterExecution", "info", "canCreate", "parent", "key", "val", "e", "isProxy", "type", "isObject", "isFunction", "isESM", "esm", "desc", "Inspectable", "target", "opts", "name", "path", "info", "update", "setFromPath", "set", "create", "keySeparator", "str", "handler", "handlers_exports", "value", "args", "fromInspectable", "setFromOptions", "path", "value", "baseOptions", "opts", "ref", "id", "isDynamic", "Inspectable", "str", "options", "setFromPath", "info", "id", "callback", "path", "originalValue", "base", "listeners", "options", "relativePath", "refs", "get", "getFromPath", "set", "value", "setFromOptions", "onUpdate", "infoToOutput", "absolute", "pathInfo", "args", "output", "val", "register", "collection", "lookup", "getPath", "functions", "setters", "type", "absPath", "allListeners", "getPathInfo", "fullInfo", "handler", "subscribeCallback", "parent", "setterExecution", "iterateSymbols", "_", "runCallback", "isProxy", "redefine", "v", "e", "functionExecution", "context", "func", "keys", "infoTemplate", "executionInfo", "o", "drillSimple", "obj", "callback", "options", "accumulator", "ignore", "path", "condition", "seen", "fromSeen", "drill", "acc", "globalInfo", "key", "val", "newPath", "info", "name", "idx", "pass", "Monitor", "opts", "Poller", "keySeparator", "path", "output", "getFromPath", "value", "optsCopy", "setFromOptions", "absPath", "callback", "info", "getPathInfo", "id", "original", "getPath", "__internal", "arrayPath", "baseRef", "esm", "__internalComplete", "ref", "toMonitorInternally", "val", "allowArrays", "subs", "drillSimple", "_", "__", "drillInfo", "fullPath", "internalSubs", "type", "e", "executionInfo", "key", "listeners_exports", "innerSub", "handleUnsubscribe", "sub", "iterateSymbols", "polling", "funcs", "func", "setters", "setter", "parent", "last", "src_default", "Monitor"]
}
